// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#include "Struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR Vector3::Vector3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DefaultTypeInternal _Vector3_default_instance_;
PROTOBUF_CONSTEXPR PosInfo::PosInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.size_)*/nullptr
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PosInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PosInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PosInfoDefaultTypeInternal() {}
  union {
    PosInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PosInfoDefaultTypeInternal _PosInfo_default_instance_;
PROTOBUF_CONSTEXPR ObjectInfo::ObjectInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_info_)*/nullptr
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.object_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectInfoDefaultTypeInternal() {}
  union {
    ObjectInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfo::PlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_info_)*/nullptr
  , /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_.player_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoDefaultTypeInternal() {}
  union {
    PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR MonsterInfo::MonsterInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_info_)*/nullptr
  , /*decltype(_impl_.monster_ablity_)*/nullptr
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.monster_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MonsterInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonsterInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonsterInfoDefaultTypeInternal() {}
  union {
    MonsterInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonsterInfoDefaultTypeInternal _MonsterInfo_default_instance_;
PROTOBUF_CONSTEXPR MonsterMoveInfo::MonsterMoveInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_info_)*/nullptr
  , /*decltype(_impl_.object_id_)*/0u
  , /*decltype(_impl_.monster_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MonsterMoveInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonsterMoveInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonsterMoveInfoDefaultTypeInternal() {}
  union {
    MonsterMoveInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonsterMoveInfoDefaultTypeInternal _MonsterMoveInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerMoveInfo::PlayerMoveInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_info_)*/nullptr
  , /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerMoveInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerMoveInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerMoveInfoDefaultTypeInternal() {}
  union {
    PlayerMoveInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerMoveInfoDefaultTypeInternal _PlayerMoveInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerAblity::PlayerAblity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.maxhp_)*/0u
  , /*decltype(_impl_.hp_)*/0u
  , /*decltype(_impl_.damage_)*/0u
  , /*decltype(_impl_.signaturegage_)*/0
  , /*decltype(_impl_.maxsignaturegage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerAblityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerAblityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerAblityDefaultTypeInternal() {}
  union {
    PlayerAblity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerAblityDefaultTypeInternal _PlayerAblity_default_instance_;
PROTOBUF_CONSTEXPR PlayerUpdateInfo::PlayerUpdateInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_info_)*/nullptr
  , /*decltype(_impl_.player_ablity_)*/nullptr
  , /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerUpdateInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerUpdateInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerUpdateInfoDefaultTypeInternal() {}
  union {
    PlayerUpdateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerUpdateInfoDefaultTypeInternal _PlayerUpdateInfo_default_instance_;
PROTOBUF_CONSTEXPR MonsterAblity::MonsterAblity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.maxhp_)*/0u
  , /*decltype(_impl_.hp_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MonsterAblityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MonsterAblityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MonsterAblityDefaultTypeInternal() {}
  union {
    MonsterAblity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MonsterAblityDefaultTypeInternal _MonsterAblity_default_instance_;
PROTOBUF_CONSTEXPR ProjectileBasicInfo::ProjectileBasicInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dir_)*/nullptr
  , /*decltype(_impl_.size_)*/nullptr
  , /*decltype(_impl_.spawn_pos_)*/nullptr
  , /*decltype(_impl_.new_projectile_id_)*/uint64_t{0u}
  , /*decltype(_impl_.player_id_)*/0u
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.damage_)*/0u
  , /*decltype(_impl_.bcollisionexplosion_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProjectileBasicInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProjectileBasicInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProjectileBasicInfoDefaultTypeInternal() {}
  union {
    ProjectileBasicInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProjectileBasicInfoDefaultTypeInternal _ProjectileBasicInfo_default_instance_;
PROTOBUF_CONSTEXPR ProjectileInfo::ProjectileInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_info_)*/nullptr
  , /*decltype(_impl_.projectile_id_)*/uint64_t{0u}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProjectileInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProjectileInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProjectileInfoDefaultTypeInternal() {}
  union {
    ProjectileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProjectileInfoDefaultTypeInternal _ProjectileInfo_default_instance_;
PROTOBUF_CONSTEXPR NpcInfo::NpcInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/{}
  , /*decltype(_impl_._item_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.object_info_)*/nullptr
  , /*decltype(_impl_.object_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NpcInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NpcInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NpcInfoDefaultTypeInternal() {}
  union {
    NpcInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NpcInfoDefaultTypeInternal _NpcInfo_default_instance_;
PROTOBUF_CONSTEXPR ItemInfo::ItemInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/0u
  , /*decltype(_impl_.is_sell_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemInfoDefaultTypeInternal() {}
  union {
    ItemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemInfoDefaultTypeInternal _ItemInfo_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Struct_2eproto[14];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Struct_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Struct_2eproto = nullptr;

const uint32_t TableStruct_Struct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector3, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector3, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector3, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PosInfo, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.object_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ObjectInfo, _impl_.pos_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.player_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerInfo, _impl_.object_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterInfo, _impl_.monster_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterInfo, _impl_.object_info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterInfo, _impl_.monster_ablity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterMoveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterMoveInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterMoveInfo, _impl_.monster_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterMoveInfo, _impl_.pos_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerMoveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerMoveInfo, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerMoveInfo, _impl_.pos_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerAblity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerAblity, _impl_.maxhp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerAblity, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerAblity, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerAblity, _impl_.signaturegage_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerAblity, _impl_.maxsignaturegage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerUpdateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerUpdateInfo, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerUpdateInfo, _impl_.pos_info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PlayerUpdateInfo, _impl_.player_ablity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterAblity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterAblity, _impl_.maxhp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::MonsterAblity, _impl_.hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileBasicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileBasicInfo, _impl_.new_projectile_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileBasicInfo, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileBasicInfo, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileBasicInfo, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileBasicInfo, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileBasicInfo, _impl_.dir_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileBasicInfo, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileBasicInfo, _impl_.spawn_pos_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileBasicInfo, _impl_.bcollisionexplosion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileInfo, _impl_.projectile_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileInfo, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ProjectileInfo, _impl_.object_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::NpcInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::NpcInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::NpcInfo, _impl_.object_info_),
  PROTOBUF_FIELD_OFFSET(::Protocol::NpcInfo, _impl_.item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::ItemInfo, _impl_.is_sell_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::Vector3)},
  { 9, -1, -1, sizeof(::Protocol::PosInfo)},
  { 20, -1, -1, sizeof(::Protocol::ObjectInfo)},
  { 29, -1, -1, sizeof(::Protocol::PlayerInfo)},
  { 38, -1, -1, sizeof(::Protocol::MonsterInfo)},
  { 48, -1, -1, sizeof(::Protocol::MonsterMoveInfo)},
  { 57, -1, -1, sizeof(::Protocol::PlayerMoveInfo)},
  { 65, -1, -1, sizeof(::Protocol::PlayerAblity)},
  { 76, -1, -1, sizeof(::Protocol::PlayerUpdateInfo)},
  { 85, -1, -1, sizeof(::Protocol::MonsterAblity)},
  { 93, -1, -1, sizeof(::Protocol::ProjectileBasicInfo)},
  { 108, -1, -1, sizeof(::Protocol::ProjectileInfo)},
  { 117, -1, -1, sizeof(::Protocol::NpcInfo)},
  { 126, -1, -1, sizeof(::Protocol::ItemInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_Vector3_default_instance_._instance,
  &::Protocol::_PosInfo_default_instance_._instance,
  &::Protocol::_ObjectInfo_default_instance_._instance,
  &::Protocol::_PlayerInfo_default_instance_._instance,
  &::Protocol::_MonsterInfo_default_instance_._instance,
  &::Protocol::_MonsterMoveInfo_default_instance_._instance,
  &::Protocol::_PlayerMoveInfo_default_instance_._instance,
  &::Protocol::_PlayerAblity_default_instance_._instance,
  &::Protocol::_PlayerUpdateInfo_default_instance_._instance,
  &::Protocol::_MonsterAblity_default_instance_._instance,
  &::Protocol::_ProjectileBasicInfo_default_instance_._instance,
  &::Protocol::_ProjectileInfo_default_instance_._instance,
  &::Protocol::_NpcInfo_default_instance_._instance,
  &::Protocol::_ItemInfo_default_instance_._instance,
};

const char descriptor_table_protodef_Struct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Struct.proto\022\010Protocol\032\nEnum.proto\"*\n\007"
  "Vector3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002"
  "\"\253\001\n\007PosInfo\022\021\n\tobject_id\030\001 \001(\004\022#\n\010Posit"
  "ion\030\002 \001(\0132\021.Protocol.Vector3\022#\n\010Rotation"
  "\030\003 \001(\0132\021.Protocol.Vector3\022\037\n\004Size\030\004 \001(\0132"
  "\021.Protocol.Vector3\022\"\n\005state\030\005 \001(\0162\023.Prot"
  "ocol.MoveState\"o\n\nObjectInfo\022\021\n\tobject_i"
  "d\030\001 \001(\004\022)\n\013object_type\030\002 \001(\0162\024.Protocol."
  "ObjectType\022#\n\010pos_info\030\003 \001(\0132\021.Protocol."
  "PosInfo\"u\n\nPlayerInfo\022\021\n\tplayer_id\030\001 \001(\r"
  "\022)\n\013player_type\030\002 \001(\0162\024.Protocol.PlayerT"
  "ype\022)\n\013object_info\030\003 \001(\0132\024.Protocol.Obje"
  "ctInfo\"\251\001\n\013MonsterInfo\022\021\n\tobject_id\030\001 \001("
  "\004\022+\n\014monster_type\030\002 \001(\0162\025.Protocol.Monst"
  "erType\022)\n\013object_info\030\003 \001(\0132\024.Protocol.O"
  "bjectInfo\022/\n\016monster_ablity\030\004 \001(\0132\027.Prot"
  "ocol.MonsterAblity\"v\n\017MonsterMoveInfo\022\021\n"
  "\tobject_id\030\001 \001(\r\022+\n\014monster_type\030\002 \001(\0162\025"
  ".Protocol.MonsterType\022#\n\010pos_info\030\003 \001(\0132"
  "\021.Protocol.PosInfo\"H\n\016PlayerMoveInfo\022\021\n\t"
  "player_id\030\001 \001(\r\022#\n\010pos_info\030\002 \001(\0132\021.Prot"
  "ocol.PosInfo\"j\n\014PlayerAblity\022\r\n\005maxhp\030\001 "
  "\001(\r\022\n\n\002hp\030\002 \001(\r\022\016\n\006damage\030\003 \001(\r\022\025\n\rsigna"
  "turegage\030\004 \001(\002\022\030\n\020maxsignaturegage\030\005 \001(\002"
  "\"y\n\020PlayerUpdateInfo\022\021\n\tplayer_id\030\001 \001(\r\022"
  "#\n\010pos_info\030\002 \001(\0132\021.Protocol.PosInfo\022-\n\r"
  "player_ablity\030\003 \001(\0132\026.Protocol.PlayerAbl"
  "ity\"*\n\rMonsterAblity\022\r\n\005maxhp\030\001 \001(\r\022\n\n\002h"
  "p\030\002 \001(\r\"\370\001\n\023ProjectileBasicInfo\022\031\n\021new_p"
  "rojectile_id\030\001 \001(\004\022\021\n\tplayer_id\030\002 \001(\r\022\020\n"
  "\010duration\030\003 \001(\002\022\r\n\005speed\030\004 \001(\002\022\016\n\006damage"
  "\030\005 \001(\r\022\036\n\003dir\030\006 \001(\0132\021.Protocol.Vector3\022\037"
  "\n\004size\030\007 \001(\0132\021.Protocol.Vector3\022$\n\tspawn"
  "_pos\030\010 \001(\0132\021.Protocol.Vector3\022\033\n\023bCollis"
  "ionExplosion\030\t \001(\010\"|\n\016ProjectileInfo\022\025\n\r"
  "Projectile_id\030\001 \001(\004\022(\n\005state\030\002 \001(\0162\031.Pro"
  "tocol.ProjectileState\022)\n\013object_info\030\003 \001"
  "(\0132\024.Protocol.ObjectInfo\"X\n\007NpcInfo\022\021\n\to"
  "bject_id\030\001 \001(\r\022)\n\013object_info\030\002 \001(\0132\024.Pr"
  "otocol.ObjectInfo\022\017\n\007item_id\030\003 \003(\r\",\n\010It"
  "emInfo\022\017\n\007item_id\030\001 \001(\r\022\017\n\007is_sell\030\002 \001(\010"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Struct_2eproto_deps[1] = {
  &::descriptor_table_Enum_2eproto,
};
static ::_pbi::once_flag descriptor_table_Struct_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Struct_2eproto = {
    false, false, 1648, descriptor_table_protodef_Struct_2eproto,
    "Struct.proto",
    &descriptor_table_Struct_2eproto_once, descriptor_table_Struct_2eproto_deps, 1, 14,
    schemas, file_default_instances, TableStruct_Struct_2eproto::offsets,
    file_level_metadata_Struct_2eproto, file_level_enum_descriptors_Struct_2eproto,
    file_level_service_descriptors_Struct_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Struct_2eproto_getter() {
  return &descriptor_table_Struct_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Struct_2eproto(&descriptor_table_Struct_2eproto);
namespace Protocol {

// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:Protocol.Vector3)
}

inline void Vector3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:Protocol.Vector3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Vector3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Vector3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Vector3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3::GetClassData() const { return &_class_data_; }


void Vector3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3*>(&to_msg);
  auto& from = static_cast<const Vector3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Vector3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_)
      + sizeof(Vector3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[0]);
}

// ===================================================================

class PosInfo::_Internal {
 public:
  static const ::Protocol::Vector3& position(const PosInfo* msg);
  static const ::Protocol::Vector3& rotation(const PosInfo* msg);
  static const ::Protocol::Vector3& size(const PosInfo* msg);
};

const ::Protocol::Vector3&
PosInfo::_Internal::position(const PosInfo* msg) {
  return *msg->_impl_.position_;
}
const ::Protocol::Vector3&
PosInfo::_Internal::rotation(const PosInfo* msg) {
  return *msg->_impl_.rotation_;
}
const ::Protocol::Vector3&
PosInfo::_Internal::size(const PosInfo* msg) {
  return *msg->_impl_.size_;
}
PosInfo::PosInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.PosInfo)
}
PosInfo::PosInfo(const PosInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PosInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Protocol::Vector3(*from._impl_.position_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::Protocol::Vector3(*from._impl_.rotation_);
  }
  if (from._internal_has_size()) {
    _this->_impl_.size_ = new ::Protocol::Vector3(*from._impl_.size_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PosInfo)
}

inline void PosInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PosInfo::~PosInfo() {
  // @@protoc_insertion_point(destructor:Protocol.PosInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PosInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
  if (this != internal_default_instance()) delete _impl_.size_;
}

void PosInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PosInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PosInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.size_ != nullptr) {
    delete _impl_.size_;
  }
  _impl_.size_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PosInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 Position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 Rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 Size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.MoveState state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::Protocol::MoveState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PosInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PosInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // .Protocol.Vector3 Position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Vector3 Rotation = 3;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Vector3 Size = 4;
  if (this->_internal_has_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  // .Protocol.MoveState state = 5;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PosInfo)
  return target;
}

size_t PosInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PosInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector3 Position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .Protocol.Vector3 Rotation = 3;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // .Protocol.Vector3 Size = 4;
  if (this->_internal_has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // .Protocol.MoveState state = 5;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PosInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PosInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PosInfo::GetClassData() const { return &_class_data_; }


void PosInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PosInfo*>(&to_msg);
  auto& from = static_cast<const PosInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PosInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Protocol::Vector3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::Protocol::Vector3::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_has_size()) {
    _this->_internal_mutable_size()->::Protocol::Vector3::MergeFrom(
        from._internal_size());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PosInfo::CopyFrom(const PosInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosInfo::IsInitialized() const {
  return true;
}

void PosInfo::InternalSwap(PosInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PosInfo, _impl_.state_)
      + sizeof(PosInfo::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(PosInfo, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PosInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[1]);
}

// ===================================================================

class ObjectInfo::_Internal {
 public:
  static const ::Protocol::PosInfo& pos_info(const ObjectInfo* msg);
};

const ::Protocol::PosInfo&
ObjectInfo::_Internal::pos_info(const ObjectInfo* msg) {
  return *msg->_impl_.pos_info_;
}
ObjectInfo::ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ObjectInfo)
}
ObjectInfo::ObjectInfo(const ObjectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.object_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos_info()) {
    _this->_impl_.pos_info_ = new ::Protocol::PosInfo(*from._impl_.pos_info_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.object_type_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.object_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ObjectInfo)
}

inline void ObjectInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.object_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObjectInfo::~ObjectInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ObjectInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_info_;
}

void ObjectInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ObjectInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.object_type_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.object_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ObjectType object_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_object_type(static_cast<::Protocol::ObjectType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PosInfo pos_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ObjectInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // .Protocol.ObjectType object_type = 2;
  if (this->_internal_object_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_object_type(), target);
  }

  // .Protocol.PosInfo pos_info = 3;
  if (this->_internal_has_pos_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pos_info(this),
        _Internal::pos_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ObjectInfo)
  return target;
}

size_t ObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ObjectInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo pos_info = 3;
  if (this->_internal_has_pos_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_info_);
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // .Protocol.ObjectType object_type = 2;
  if (this->_internal_object_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_object_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectInfo::GetClassData() const { return &_class_data_; }


void ObjectInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectInfo*>(&to_msg);
  auto& from = static_cast<const ObjectInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ObjectInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos_info()) {
    _this->_internal_mutable_pos_info()->::Protocol::PosInfo::MergeFrom(
        from._internal_pos_info());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_object_type() != 0) {
    _this->_internal_set_object_type(from._internal_object_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectInfo::CopyFrom(const ObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectInfo::IsInitialized() const {
  return true;
}

void ObjectInfo::InternalSwap(ObjectInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectInfo, _impl_.object_type_)
      + sizeof(ObjectInfo::_impl_.object_type_)
      - PROTOBUF_FIELD_OFFSET(ObjectInfo, _impl_.pos_info_)>(
          reinterpret_cast<char*>(&_impl_.pos_info_),
          reinterpret_cast<char*>(&other->_impl_.pos_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[2]);
}

// ===================================================================

class PlayerInfo::_Internal {
 public:
  static const ::Protocol::ObjectInfo& object_info(const PlayerInfo* msg);
};

const ::Protocol::ObjectInfo&
PlayerInfo::_Internal::object_info(const PlayerInfo* msg) {
  return *msg->_impl_.object_info_;
}
PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_info_){nullptr}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.player_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object_info()) {
    _this->_impl_.object_info_ = new ::Protocol::ObjectInfo(*from._impl_.object_info_);
  }
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_type_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.player_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PlayerInfo)
}

inline void PlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_info_){nullptr}
    , decltype(_impl_.player_id_){0u}
    , decltype(_impl_.player_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:Protocol.PlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.object_info_;
}

void PlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.object_info_ != nullptr) {
    delete _impl_.object_info_;
  }
  _impl_.object_info_ = nullptr;
  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.player_type_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.player_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerType player_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_player_type(static_cast<::Protocol::PlayerType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ObjectInfo object_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // .Protocol.PlayerType player_type = 2;
  if (this->_internal_player_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_player_type(), target);
  }

  // .Protocol.ObjectInfo object_info = 3;
  if (this->_internal_has_object_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::object_info(this),
        _Internal::object_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ObjectInfo object_info = 3;
  if (this->_internal_has_object_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_info_);
  }

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  // .Protocol.PlayerType player_type = 2;
  if (this->_internal_player_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_player_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfo::GetClassData() const { return &_class_data_; }


void PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfo*>(&to_msg);
  auto& from = static_cast<const PlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object_info()) {
    _this->_internal_mutable_object_info()->::Protocol::ObjectInfo::MergeFrom(
        from._internal_object_info());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_player_type() != 0) {
    _this->_internal_set_player_type(from._internal_player_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.player_type_)
      + sizeof(PlayerInfo::_impl_.player_type_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.object_info_)>(
          reinterpret_cast<char*>(&_impl_.object_info_),
          reinterpret_cast<char*>(&other->_impl_.object_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[3]);
}

// ===================================================================

class MonsterInfo::_Internal {
 public:
  static const ::Protocol::ObjectInfo& object_info(const MonsterInfo* msg);
  static const ::Protocol::MonsterAblity& monster_ablity(const MonsterInfo* msg);
};

const ::Protocol::ObjectInfo&
MonsterInfo::_Internal::object_info(const MonsterInfo* msg) {
  return *msg->_impl_.object_info_;
}
const ::Protocol::MonsterAblity&
MonsterInfo::_Internal::monster_ablity(const MonsterInfo* msg) {
  return *msg->_impl_.monster_ablity_;
}
MonsterInfo::MonsterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.MonsterInfo)
}
MonsterInfo::MonsterInfo(const MonsterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MonsterInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_info_){nullptr}
    , decltype(_impl_.monster_ablity_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.monster_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object_info()) {
    _this->_impl_.object_info_ = new ::Protocol::ObjectInfo(*from._impl_.object_info_);
  }
  if (from._internal_has_monster_ablity()) {
    _this->_impl_.monster_ablity_ = new ::Protocol::MonsterAblity(*from._impl_.monster_ablity_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.monster_type_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.monster_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.MonsterInfo)
}

inline void MonsterInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_info_){nullptr}
    , decltype(_impl_.monster_ablity_){nullptr}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.monster_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MonsterInfo::~MonsterInfo() {
  // @@protoc_insertion_point(destructor:Protocol.MonsterInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonsterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.object_info_;
  if (this != internal_default_instance()) delete _impl_.monster_ablity_;
}

void MonsterInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MonsterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.MonsterInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.object_info_ != nullptr) {
    delete _impl_.object_info_;
  }
  _impl_.object_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.monster_ablity_ != nullptr) {
    delete _impl_.monster_ablity_;
  }
  _impl_.monster_ablity_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.monster_type_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.monster_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonsterInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.MonsterType monster_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_monster_type(static_cast<::Protocol::MonsterType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ObjectInfo object_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.MonsterAblity monster_ablity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_monster_ablity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonsterInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.MonsterInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // .Protocol.MonsterType monster_type = 2;
  if (this->_internal_monster_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_monster_type(), target);
  }

  // .Protocol.ObjectInfo object_info = 3;
  if (this->_internal_has_object_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::object_info(this),
        _Internal::object_info(this).GetCachedSize(), target, stream);
  }

  // .Protocol.MonsterAblity monster_ablity = 4;
  if (this->_internal_has_monster_ablity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::monster_ablity(this),
        _Internal::monster_ablity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.MonsterInfo)
  return target;
}

size_t MonsterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.MonsterInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ObjectInfo object_info = 3;
  if (this->_internal_has_object_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_info_);
  }

  // .Protocol.MonsterAblity monster_ablity = 4;
  if (this->_internal_has_monster_ablity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.monster_ablity_);
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // .Protocol.MonsterType monster_type = 2;
  if (this->_internal_monster_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_monster_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonsterInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MonsterInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonsterInfo::GetClassData() const { return &_class_data_; }


void MonsterInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MonsterInfo*>(&to_msg);
  auto& from = static_cast<const MonsterInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.MonsterInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object_info()) {
    _this->_internal_mutable_object_info()->::Protocol::ObjectInfo::MergeFrom(
        from._internal_object_info());
  }
  if (from._internal_has_monster_ablity()) {
    _this->_internal_mutable_monster_ablity()->::Protocol::MonsterAblity::MergeFrom(
        from._internal_monster_ablity());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_monster_type() != 0) {
    _this->_internal_set_monster_type(from._internal_monster_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonsterInfo::CopyFrom(const MonsterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.MonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterInfo::IsInitialized() const {
  return true;
}

void MonsterInfo::InternalSwap(MonsterInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonsterInfo, _impl_.monster_type_)
      + sizeof(MonsterInfo::_impl_.monster_type_)
      - PROTOBUF_FIELD_OFFSET(MonsterInfo, _impl_.object_info_)>(
          reinterpret_cast<char*>(&_impl_.object_info_),
          reinterpret_cast<char*>(&other->_impl_.object_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonsterInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[4]);
}

// ===================================================================

class MonsterMoveInfo::_Internal {
 public:
  static const ::Protocol::PosInfo& pos_info(const MonsterMoveInfo* msg);
};

const ::Protocol::PosInfo&
MonsterMoveInfo::_Internal::pos_info(const MonsterMoveInfo* msg) {
  return *msg->_impl_.pos_info_;
}
MonsterMoveInfo::MonsterMoveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.MonsterMoveInfo)
}
MonsterMoveInfo::MonsterMoveInfo(const MonsterMoveInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MonsterMoveInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.monster_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos_info()) {
    _this->_impl_.pos_info_ = new ::Protocol::PosInfo(*from._impl_.pos_info_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.monster_type_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.monster_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.MonsterMoveInfo)
}

inline void MonsterMoveInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.object_id_){0u}
    , decltype(_impl_.monster_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MonsterMoveInfo::~MonsterMoveInfo() {
  // @@protoc_insertion_point(destructor:Protocol.MonsterMoveInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonsterMoveInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_info_;
}

void MonsterMoveInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MonsterMoveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.MonsterMoveInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.monster_type_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.monster_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonsterMoveInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.MonsterType monster_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_monster_type(static_cast<::Protocol::MonsterType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PosInfo pos_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonsterMoveInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.MonsterMoveInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_object_id(), target);
  }

  // .Protocol.MonsterType monster_type = 2;
  if (this->_internal_monster_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_monster_type(), target);
  }

  // .Protocol.PosInfo pos_info = 3;
  if (this->_internal_has_pos_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pos_info(this),
        _Internal::pos_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.MonsterMoveInfo)
  return target;
}

size_t MonsterMoveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.MonsterMoveInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo pos_info = 3;
  if (this->_internal_has_pos_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_info_);
  }

  // uint32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_object_id());
  }

  // .Protocol.MonsterType monster_type = 2;
  if (this->_internal_monster_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_monster_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonsterMoveInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MonsterMoveInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonsterMoveInfo::GetClassData() const { return &_class_data_; }


void MonsterMoveInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MonsterMoveInfo*>(&to_msg);
  auto& from = static_cast<const MonsterMoveInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.MonsterMoveInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos_info()) {
    _this->_internal_mutable_pos_info()->::Protocol::PosInfo::MergeFrom(
        from._internal_pos_info());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_monster_type() != 0) {
    _this->_internal_set_monster_type(from._internal_monster_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonsterMoveInfo::CopyFrom(const MonsterMoveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.MonsterMoveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterMoveInfo::IsInitialized() const {
  return true;
}

void MonsterMoveInfo::InternalSwap(MonsterMoveInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonsterMoveInfo, _impl_.monster_type_)
      + sizeof(MonsterMoveInfo::_impl_.monster_type_)
      - PROTOBUF_FIELD_OFFSET(MonsterMoveInfo, _impl_.pos_info_)>(
          reinterpret_cast<char*>(&_impl_.pos_info_),
          reinterpret_cast<char*>(&other->_impl_.pos_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonsterMoveInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[5]);
}

// ===================================================================

class PlayerMoveInfo::_Internal {
 public:
  static const ::Protocol::PosInfo& pos_info(const PlayerMoveInfo* msg);
};

const ::Protocol::PosInfo&
PlayerMoveInfo::_Internal::pos_info(const PlayerMoveInfo* msg) {
  return *msg->_impl_.pos_info_;
}
PlayerMoveInfo::PlayerMoveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.PlayerMoveInfo)
}
PlayerMoveInfo::PlayerMoveInfo(const PlayerMoveInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerMoveInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos_info()) {
    _this->_impl_.pos_info_ = new ::Protocol::PosInfo(*from._impl_.pos_info_);
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.PlayerMoveInfo)
}

inline void PlayerMoveInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.player_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerMoveInfo::~PlayerMoveInfo() {
  // @@protoc_insertion_point(destructor:Protocol.PlayerMoveInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerMoveInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_info_;
}

void PlayerMoveInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerMoveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PlayerMoveInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
  _impl_.player_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerMoveInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PosInfo pos_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerMoveInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PlayerMoveInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // .Protocol.PosInfo pos_info = 2;
  if (this->_internal_has_pos_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pos_info(this),
        _Internal::pos_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PlayerMoveInfo)
  return target;
}

size_t PlayerMoveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PlayerMoveInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo pos_info = 2;
  if (this->_internal_has_pos_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_info_);
  }

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerMoveInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerMoveInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerMoveInfo::GetClassData() const { return &_class_data_; }


void PlayerMoveInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerMoveInfo*>(&to_msg);
  auto& from = static_cast<const PlayerMoveInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PlayerMoveInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos_info()) {
    _this->_internal_mutable_pos_info()->::Protocol::PosInfo::MergeFrom(
        from._internal_pos_info());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerMoveInfo::CopyFrom(const PlayerMoveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PlayerMoveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMoveInfo::IsInitialized() const {
  return true;
}

void PlayerMoveInfo::InternalSwap(PlayerMoveInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerMoveInfo, _impl_.player_id_)
      + sizeof(PlayerMoveInfo::_impl_.player_id_)
      - PROTOBUF_FIELD_OFFSET(PlayerMoveInfo, _impl_.pos_info_)>(
          reinterpret_cast<char*>(&_impl_.pos_info_),
          reinterpret_cast<char*>(&other->_impl_.pos_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerMoveInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[6]);
}

// ===================================================================

class PlayerAblity::_Internal {
 public:
};

PlayerAblity::PlayerAblity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.PlayerAblity)
}
PlayerAblity::PlayerAblity(const PlayerAblity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerAblity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.maxhp_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.signaturegage_){}
    , decltype(_impl_.maxsignaturegage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.maxhp_, &from._impl_.maxhp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxsignaturegage_) -
    reinterpret_cast<char*>(&_impl_.maxhp_)) + sizeof(_impl_.maxsignaturegage_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PlayerAblity)
}

inline void PlayerAblity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.maxhp_){0u}
    , decltype(_impl_.hp_){0u}
    , decltype(_impl_.damage_){0u}
    , decltype(_impl_.signaturegage_){0}
    , decltype(_impl_.maxsignaturegage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerAblity::~PlayerAblity() {
  // @@protoc_insertion_point(destructor:Protocol.PlayerAblity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerAblity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerAblity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerAblity::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PlayerAblity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.maxhp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxsignaturegage_) -
      reinterpret_cast<char*>(&_impl_.maxhp_)) + sizeof(_impl_.maxsignaturegage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerAblity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 maxhp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float signaturegage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.signaturegage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float maxsignaturegage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.maxsignaturegage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerAblity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PlayerAblity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 maxhp = 1;
  if (this->_internal_maxhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_maxhp(), target);
  }

  // uint32 hp = 2;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hp(), target);
  }

  // uint32 damage = 3;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_damage(), target);
  }

  // float signaturegage = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_signaturegage = this->_internal_signaturegage();
  uint32_t raw_signaturegage;
  memcpy(&raw_signaturegage, &tmp_signaturegage, sizeof(tmp_signaturegage));
  if (raw_signaturegage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_signaturegage(), target);
  }

  // float maxsignaturegage = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxsignaturegage = this->_internal_maxsignaturegage();
  uint32_t raw_maxsignaturegage;
  memcpy(&raw_maxsignaturegage, &tmp_maxsignaturegage, sizeof(tmp_maxsignaturegage));
  if (raw_maxsignaturegage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_maxsignaturegage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PlayerAblity)
  return target;
}

size_t PlayerAblity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PlayerAblity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 maxhp = 1;
  if (this->_internal_maxhp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxhp());
  }

  // uint32 hp = 2;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hp());
  }

  // uint32 damage = 3;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage());
  }

  // float signaturegage = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_signaturegage = this->_internal_signaturegage();
  uint32_t raw_signaturegage;
  memcpy(&raw_signaturegage, &tmp_signaturegage, sizeof(tmp_signaturegage));
  if (raw_signaturegage != 0) {
    total_size += 1 + 4;
  }

  // float maxsignaturegage = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxsignaturegage = this->_internal_maxsignaturegage();
  uint32_t raw_maxsignaturegage;
  memcpy(&raw_maxsignaturegage, &tmp_maxsignaturegage, sizeof(tmp_maxsignaturegage));
  if (raw_maxsignaturegage != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerAblity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerAblity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerAblity::GetClassData() const { return &_class_data_; }


void PlayerAblity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerAblity*>(&to_msg);
  auto& from = static_cast<const PlayerAblity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PlayerAblity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_maxhp() != 0) {
    _this->_internal_set_maxhp(from._internal_maxhp());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_signaturegage = from._internal_signaturegage();
  uint32_t raw_signaturegage;
  memcpy(&raw_signaturegage, &tmp_signaturegage, sizeof(tmp_signaturegage));
  if (raw_signaturegage != 0) {
    _this->_internal_set_signaturegage(from._internal_signaturegage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_maxsignaturegage = from._internal_maxsignaturegage();
  uint32_t raw_maxsignaturegage;
  memcpy(&raw_maxsignaturegage, &tmp_maxsignaturegage, sizeof(tmp_maxsignaturegage));
  if (raw_maxsignaturegage != 0) {
    _this->_internal_set_maxsignaturegage(from._internal_maxsignaturegage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerAblity::CopyFrom(const PlayerAblity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PlayerAblity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAblity::IsInitialized() const {
  return true;
}

void PlayerAblity::InternalSwap(PlayerAblity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerAblity, _impl_.maxsignaturegage_)
      + sizeof(PlayerAblity::_impl_.maxsignaturegage_)
      - PROTOBUF_FIELD_OFFSET(PlayerAblity, _impl_.maxhp_)>(
          reinterpret_cast<char*>(&_impl_.maxhp_),
          reinterpret_cast<char*>(&other->_impl_.maxhp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerAblity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[7]);
}

// ===================================================================

class PlayerUpdateInfo::_Internal {
 public:
  static const ::Protocol::PosInfo& pos_info(const PlayerUpdateInfo* msg);
  static const ::Protocol::PlayerAblity& player_ablity(const PlayerUpdateInfo* msg);
};

const ::Protocol::PosInfo&
PlayerUpdateInfo::_Internal::pos_info(const PlayerUpdateInfo* msg) {
  return *msg->_impl_.pos_info_;
}
const ::Protocol::PlayerAblity&
PlayerUpdateInfo::_Internal::player_ablity(const PlayerUpdateInfo* msg) {
  return *msg->_impl_.player_ablity_;
}
PlayerUpdateInfo::PlayerUpdateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.PlayerUpdateInfo)
}
PlayerUpdateInfo::PlayerUpdateInfo(const PlayerUpdateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerUpdateInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.player_ablity_){nullptr}
    , decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos_info()) {
    _this->_impl_.pos_info_ = new ::Protocol::PosInfo(*from._impl_.pos_info_);
  }
  if (from._internal_has_player_ablity()) {
    _this->_impl_.player_ablity_ = new ::Protocol::PlayerAblity(*from._impl_.player_ablity_);
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.PlayerUpdateInfo)
}

inline void PlayerUpdateInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_info_){nullptr}
    , decltype(_impl_.player_ablity_){nullptr}
    , decltype(_impl_.player_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerUpdateInfo::~PlayerUpdateInfo() {
  // @@protoc_insertion_point(destructor:Protocol.PlayerUpdateInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerUpdateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_info_;
  if (this != internal_default_instance()) delete _impl_.player_ablity_;
}

void PlayerUpdateInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerUpdateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PlayerUpdateInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.player_ablity_ != nullptr) {
    delete _impl_.player_ablity_;
  }
  _impl_.player_ablity_ = nullptr;
  _impl_.player_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerUpdateInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PosInfo pos_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerAblity player_ablity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_ablity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerUpdateInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PlayerUpdateInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // .Protocol.PosInfo pos_info = 2;
  if (this->_internal_has_pos_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pos_info(this),
        _Internal::pos_info(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PlayerAblity player_ablity = 3;
  if (this->_internal_has_player_ablity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player_ablity(this),
        _Internal::player_ablity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PlayerUpdateInfo)
  return target;
}

size_t PlayerUpdateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PlayerUpdateInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo pos_info = 2;
  if (this->_internal_has_pos_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_info_);
  }

  // .Protocol.PlayerAblity player_ablity = 3;
  if (this->_internal_has_player_ablity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_ablity_);
  }

  // uint32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerUpdateInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerUpdateInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerUpdateInfo::GetClassData() const { return &_class_data_; }


void PlayerUpdateInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerUpdateInfo*>(&to_msg);
  auto& from = static_cast<const PlayerUpdateInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PlayerUpdateInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos_info()) {
    _this->_internal_mutable_pos_info()->::Protocol::PosInfo::MergeFrom(
        from._internal_pos_info());
  }
  if (from._internal_has_player_ablity()) {
    _this->_internal_mutable_player_ablity()->::Protocol::PlayerAblity::MergeFrom(
        from._internal_player_ablity());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerUpdateInfo::CopyFrom(const PlayerUpdateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PlayerUpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerUpdateInfo::IsInitialized() const {
  return true;
}

void PlayerUpdateInfo::InternalSwap(PlayerUpdateInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerUpdateInfo, _impl_.player_id_)
      + sizeof(PlayerUpdateInfo::_impl_.player_id_)
      - PROTOBUF_FIELD_OFFSET(PlayerUpdateInfo, _impl_.pos_info_)>(
          reinterpret_cast<char*>(&_impl_.pos_info_),
          reinterpret_cast<char*>(&other->_impl_.pos_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerUpdateInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[8]);
}

// ===================================================================

class MonsterAblity::_Internal {
 public:
};

MonsterAblity::MonsterAblity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.MonsterAblity)
}
MonsterAblity::MonsterAblity(const MonsterAblity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MonsterAblity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.maxhp_){}
    , decltype(_impl_.hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.maxhp_, &from._impl_.maxhp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) -
    reinterpret_cast<char*>(&_impl_.maxhp_)) + sizeof(_impl_.hp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.MonsterAblity)
}

inline void MonsterAblity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.maxhp_){0u}
    , decltype(_impl_.hp_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MonsterAblity::~MonsterAblity() {
  // @@protoc_insertion_point(destructor:Protocol.MonsterAblity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MonsterAblity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MonsterAblity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MonsterAblity::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.MonsterAblity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.maxhp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hp_) -
      reinterpret_cast<char*>(&_impl_.maxhp_)) + sizeof(_impl_.hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MonsterAblity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 maxhp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MonsterAblity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.MonsterAblity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 maxhp = 1;
  if (this->_internal_maxhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_maxhp(), target);
  }

  // uint32 hp = 2;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.MonsterAblity)
  return target;
}

size_t MonsterAblity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.MonsterAblity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 maxhp = 1;
  if (this->_internal_maxhp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxhp());
  }

  // uint32 hp = 2;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MonsterAblity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MonsterAblity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MonsterAblity::GetClassData() const { return &_class_data_; }


void MonsterAblity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MonsterAblity*>(&to_msg);
  auto& from = static_cast<const MonsterAblity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.MonsterAblity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_maxhp() != 0) {
    _this->_internal_set_maxhp(from._internal_maxhp());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MonsterAblity::CopyFrom(const MonsterAblity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.MonsterAblity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterAblity::IsInitialized() const {
  return true;
}

void MonsterAblity::InternalSwap(MonsterAblity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MonsterAblity, _impl_.hp_)
      + sizeof(MonsterAblity::_impl_.hp_)
      - PROTOBUF_FIELD_OFFSET(MonsterAblity, _impl_.maxhp_)>(
          reinterpret_cast<char*>(&_impl_.maxhp_),
          reinterpret_cast<char*>(&other->_impl_.maxhp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MonsterAblity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[9]);
}

// ===================================================================

class ProjectileBasicInfo::_Internal {
 public:
  static const ::Protocol::Vector3& dir(const ProjectileBasicInfo* msg);
  static const ::Protocol::Vector3& size(const ProjectileBasicInfo* msg);
  static const ::Protocol::Vector3& spawn_pos(const ProjectileBasicInfo* msg);
};

const ::Protocol::Vector3&
ProjectileBasicInfo::_Internal::dir(const ProjectileBasicInfo* msg) {
  return *msg->_impl_.dir_;
}
const ::Protocol::Vector3&
ProjectileBasicInfo::_Internal::size(const ProjectileBasicInfo* msg) {
  return *msg->_impl_.size_;
}
const ::Protocol::Vector3&
ProjectileBasicInfo::_Internal::spawn_pos(const ProjectileBasicInfo* msg) {
  return *msg->_impl_.spawn_pos_;
}
ProjectileBasicInfo::ProjectileBasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ProjectileBasicInfo)
}
ProjectileBasicInfo::ProjectileBasicInfo(const ProjectileBasicInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProjectileBasicInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dir_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.spawn_pos_){nullptr}
    , decltype(_impl_.new_projectile_id_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.bcollisionexplosion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dir()) {
    _this->_impl_.dir_ = new ::Protocol::Vector3(*from._impl_.dir_);
  }
  if (from._internal_has_size()) {
    _this->_impl_.size_ = new ::Protocol::Vector3(*from._impl_.size_);
  }
  if (from._internal_has_spawn_pos()) {
    _this->_impl_.spawn_pos_ = new ::Protocol::Vector3(*from._impl_.spawn_pos_);
  }
  ::memcpy(&_impl_.new_projectile_id_, &from._impl_.new_projectile_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bcollisionexplosion_) -
    reinterpret_cast<char*>(&_impl_.new_projectile_id_)) + sizeof(_impl_.bcollisionexplosion_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ProjectileBasicInfo)
}

inline void ProjectileBasicInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dir_){nullptr}
    , decltype(_impl_.size_){nullptr}
    , decltype(_impl_.spawn_pos_){nullptr}
    , decltype(_impl_.new_projectile_id_){uint64_t{0u}}
    , decltype(_impl_.player_id_){0u}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.damage_){0u}
    , decltype(_impl_.bcollisionexplosion_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProjectileBasicInfo::~ProjectileBasicInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ProjectileBasicInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProjectileBasicInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.dir_;
  if (this != internal_default_instance()) delete _impl_.size_;
  if (this != internal_default_instance()) delete _impl_.spawn_pos_;
}

void ProjectileBasicInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProjectileBasicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ProjectileBasicInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.dir_ != nullptr) {
    delete _impl_.dir_;
  }
  _impl_.dir_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.size_ != nullptr) {
    delete _impl_.size_;
  }
  _impl_.size_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.spawn_pos_ != nullptr) {
    delete _impl_.spawn_pos_;
  }
  _impl_.spawn_pos_ = nullptr;
  ::memset(&_impl_.new_projectile_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bcollisionexplosion_) -
      reinterpret_cast<char*>(&_impl_.new_projectile_id_)) + sizeof(_impl_.bcollisionexplosion_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectileBasicInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 new_projectile_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.new_projectile_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 damage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 dir = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dir(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 spawn_pos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_spawn_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bCollisionExplosion = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.bcollisionexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProjectileBasicInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ProjectileBasicInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 new_projectile_id = 1;
  if (this->_internal_new_projectile_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_new_projectile_id(), target);
  }

  // uint32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_id(), target);
  }

  // float duration = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_duration(), target);
  }

  // float speed = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_speed(), target);
  }

  // uint32 damage = 5;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_damage(), target);
  }

  // .Protocol.Vector3 dir = 6;
  if (this->_internal_has_dir()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::dir(this),
        _Internal::dir(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Vector3 size = 7;
  if (this->_internal_has_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Vector3 spawn_pos = 8;
  if (this->_internal_has_spawn_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::spawn_pos(this),
        _Internal::spawn_pos(this).GetCachedSize(), target, stream);
  }

  // bool bCollisionExplosion = 9;
  if (this->_internal_bcollisionexplosion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_bcollisionexplosion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ProjectileBasicInfo)
  return target;
}

size_t ProjectileBasicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ProjectileBasicInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector3 dir = 6;
  if (this->_internal_has_dir()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dir_);
  }

  // .Protocol.Vector3 size = 7;
  if (this->_internal_has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);
  }

  // .Protocol.Vector3 spawn_pos = 8;
  if (this->_internal_has_spawn_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spawn_pos_);
  }

  // uint64 new_projectile_id = 1;
  if (this->_internal_new_projectile_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_new_projectile_id());
  }

  // uint32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_id());
  }

  // float duration = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    total_size += 1 + 4;
  }

  // float speed = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  // uint32 damage = 5;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage());
  }

  // bool bCollisionExplosion = 9;
  if (this->_internal_bcollisionexplosion() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectileBasicInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProjectileBasicInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectileBasicInfo::GetClassData() const { return &_class_data_; }


void ProjectileBasicInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProjectileBasicInfo*>(&to_msg);
  auto& from = static_cast<const ProjectileBasicInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ProjectileBasicInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dir()) {
    _this->_internal_mutable_dir()->::Protocol::Vector3::MergeFrom(
        from._internal_dir());
  }
  if (from._internal_has_size()) {
    _this->_internal_mutable_size()->::Protocol::Vector3::MergeFrom(
        from._internal_size());
  }
  if (from._internal_has_spawn_pos()) {
    _this->_internal_mutable_spawn_pos()->::Protocol::Vector3::MergeFrom(
        from._internal_spawn_pos());
  }
  if (from._internal_new_projectile_id() != 0) {
    _this->_internal_set_new_projectile_id(from._internal_new_projectile_id());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration = from._internal_duration();
  uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  if (from._internal_bcollisionexplosion() != 0) {
    _this->_internal_set_bcollisionexplosion(from._internal_bcollisionexplosion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectileBasicInfo::CopyFrom(const ProjectileBasicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ProjectileBasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectileBasicInfo::IsInitialized() const {
  return true;
}

void ProjectileBasicInfo::InternalSwap(ProjectileBasicInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjectileBasicInfo, _impl_.bcollisionexplosion_)
      + sizeof(ProjectileBasicInfo::_impl_.bcollisionexplosion_)
      - PROTOBUF_FIELD_OFFSET(ProjectileBasicInfo, _impl_.dir_)>(
          reinterpret_cast<char*>(&_impl_.dir_),
          reinterpret_cast<char*>(&other->_impl_.dir_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectileBasicInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[10]);
}

// ===================================================================

class ProjectileInfo::_Internal {
 public:
  static const ::Protocol::ObjectInfo& object_info(const ProjectileInfo* msg);
};

const ::Protocol::ObjectInfo&
ProjectileInfo::_Internal::object_info(const ProjectileInfo* msg) {
  return *msg->_impl_.object_info_;
}
ProjectileInfo::ProjectileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ProjectileInfo)
}
ProjectileInfo::ProjectileInfo(const ProjectileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProjectileInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_info_){nullptr}
    , decltype(_impl_.projectile_id_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object_info()) {
    _this->_impl_.object_info_ = new ::Protocol::ObjectInfo(*from._impl_.object_info_);
  }
  ::memcpy(&_impl_.projectile_id_, &from._impl_.projectile_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.projectile_id_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ProjectileInfo)
}

inline void ProjectileInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_info_){nullptr}
    , decltype(_impl_.projectile_id_){uint64_t{0u}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProjectileInfo::~ProjectileInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ProjectileInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProjectileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.object_info_;
}

void ProjectileInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProjectileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ProjectileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.object_info_ != nullptr) {
    delete _impl_.object_info_;
  }
  _impl_.object_info_ = nullptr;
  ::memset(&_impl_.projectile_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.projectile_id_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProjectileInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Projectile_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.projectile_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ProjectileState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::Protocol::ProjectileState>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ObjectInfo object_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProjectileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ProjectileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Projectile_id = 1;
  if (this->_internal_projectile_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_projectile_id(), target);
  }

  // .Protocol.ProjectileState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .Protocol.ObjectInfo object_info = 3;
  if (this->_internal_has_object_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::object_info(this),
        _Internal::object_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ProjectileInfo)
  return target;
}

size_t ProjectileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ProjectileInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ObjectInfo object_info = 3;
  if (this->_internal_has_object_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_info_);
  }

  // uint64 Projectile_id = 1;
  if (this->_internal_projectile_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_projectile_id());
  }

  // .Protocol.ProjectileState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProjectileInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProjectileInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProjectileInfo::GetClassData() const { return &_class_data_; }


void ProjectileInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProjectileInfo*>(&to_msg);
  auto& from = static_cast<const ProjectileInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ProjectileInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object_info()) {
    _this->_internal_mutable_object_info()->::Protocol::ObjectInfo::MergeFrom(
        from._internal_object_info());
  }
  if (from._internal_projectile_id() != 0) {
    _this->_internal_set_projectile_id(from._internal_projectile_id());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProjectileInfo::CopyFrom(const ProjectileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ProjectileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectileInfo::IsInitialized() const {
  return true;
}

void ProjectileInfo::InternalSwap(ProjectileInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProjectileInfo, _impl_.state_)
      + sizeof(ProjectileInfo::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(ProjectileInfo, _impl_.object_info_)>(
          reinterpret_cast<char*>(&_impl_.object_info_),
          reinterpret_cast<char*>(&other->_impl_.object_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectileInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[11]);
}

// ===================================================================

class NpcInfo::_Internal {
 public:
  static const ::Protocol::ObjectInfo& object_info(const NpcInfo* msg);
};

const ::Protocol::ObjectInfo&
NpcInfo::_Internal::object_info(const NpcInfo* msg) {
  return *msg->_impl_.object_info_;
}
NpcInfo::NpcInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.NpcInfo)
}
NpcInfo::NpcInfo(const NpcInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NpcInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){from._impl_.item_id_}
    , /*decltype(_impl_._item_id_cached_byte_size_)*/{0}
    , decltype(_impl_.object_info_){nullptr}
    , decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object_info()) {
    _this->_impl_.object_info_ = new ::Protocol::ObjectInfo(*from._impl_.object_info_);
  }
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.NpcInfo)
}

inline void NpcInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){arena}
    , /*decltype(_impl_._item_id_cached_byte_size_)*/{0}
    , decltype(_impl_.object_info_){nullptr}
    , decltype(_impl_.object_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NpcInfo::~NpcInfo() {
  // @@protoc_insertion_point(destructor:Protocol.NpcInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NpcInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_id_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.object_info_;
}

void NpcInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NpcInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.NpcInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_id_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.object_info_ != nullptr) {
    delete _impl_.object_info_;
  }
  _impl_.object_info_ = nullptr;
  _impl_.object_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NpcInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ObjectInfo object_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_item_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_item_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NpcInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.NpcInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_object_id(), target);
  }

  // .Protocol.ObjectInfo object_info = 2;
  if (this->_internal_has_object_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::object_info(this),
        _Internal::object_info(this).GetCachedSize(), target, stream);
  }

  // repeated uint32 item_id = 3;
  {
    int byte_size = _impl_._item_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_item_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.NpcInfo)
  return target;
}

size_t NpcInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.NpcInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 item_id = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.item_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._item_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Protocol.ObjectInfo object_info = 2;
  if (this->_internal_has_object_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_info_);
  }

  // uint32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NpcInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NpcInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NpcInfo::GetClassData() const { return &_class_data_; }


void NpcInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NpcInfo*>(&to_msg);
  auto& from = static_cast<const NpcInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.NpcInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_id_.MergeFrom(from._impl_.item_id_);
  if (from._internal_has_object_info()) {
    _this->_internal_mutable_object_info()->::Protocol::ObjectInfo::MergeFrom(
        from._internal_object_info());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NpcInfo::CopyFrom(const NpcInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.NpcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcInfo::IsInitialized() const {
  return true;
}

void NpcInfo::InternalSwap(NpcInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item_id_.InternalSwap(&other->_impl_.item_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NpcInfo, _impl_.object_id_)
      + sizeof(NpcInfo::_impl_.object_id_)
      - PROTOBUF_FIELD_OFFSET(NpcInfo, _impl_.object_info_)>(
          reinterpret_cast<char*>(&_impl_.object_info_),
          reinterpret_cast<char*>(&other->_impl_.object_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NpcInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[12]);
}

// ===================================================================

class ItemInfo::_Internal {
 public:
};

ItemInfo::ItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.ItemInfo)
}
ItemInfo::ItemInfo(const ItemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , decltype(_impl_.is_sell_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_sell_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.is_sell_));
  // @@protoc_insertion_point(copy_constructor:Protocol.ItemInfo)
}

inline void ItemInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){0u}
    , decltype(_impl_.is_sell_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:Protocol.ItemInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ItemInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.ItemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_sell_) -
      reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.is_sell_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_sell = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_sell_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.ItemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  // bool is_sell = 2;
  if (this->_internal_is_sell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_sell(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.ItemInfo)
  return target;
}

size_t ItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.ItemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
  }

  // bool is_sell = 2;
  if (this->_internal_is_sell() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemInfo::GetClassData() const { return &_class_data_; }


void ItemInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemInfo*>(&to_msg);
  auto& from = static_cast<const ItemInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.ItemInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_is_sell() != 0) {
    _this->_internal_set_is_sell(from._internal_is_sell());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.ItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {
  return true;
}

void ItemInfo::InternalSwap(ItemInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemInfo, _impl_.is_sell_)
      + sizeof(ItemInfo::_impl_.is_sell_)
      - PROTOBUF_FIELD_OFFSET(ItemInfo, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::Vector3*
Arena::CreateMaybeMessage< ::Protocol::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PosInfo*
Arena::CreateMaybeMessage< ::Protocol::PosInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PosInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ObjectInfo*
Arena::CreateMaybeMessage< ::Protocol::ObjectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ObjectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PlayerInfo*
Arena::CreateMaybeMessage< ::Protocol::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::MonsterInfo*
Arena::CreateMaybeMessage< ::Protocol::MonsterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::MonsterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::MonsterMoveInfo*
Arena::CreateMaybeMessage< ::Protocol::MonsterMoveInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::MonsterMoveInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PlayerMoveInfo*
Arena::CreateMaybeMessage< ::Protocol::PlayerMoveInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PlayerMoveInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PlayerAblity*
Arena::CreateMaybeMessage< ::Protocol::PlayerAblity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PlayerAblity >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PlayerUpdateInfo*
Arena::CreateMaybeMessage< ::Protocol::PlayerUpdateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PlayerUpdateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::MonsterAblity*
Arena::CreateMaybeMessage< ::Protocol::MonsterAblity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::MonsterAblity >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ProjectileBasicInfo*
Arena::CreateMaybeMessage< ::Protocol::ProjectileBasicInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ProjectileBasicInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ProjectileInfo*
Arena::CreateMaybeMessage< ::Protocol::ProjectileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ProjectileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::NpcInfo*
Arena::CreateMaybeMessage< ::Protocol::NpcInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::NpcInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::ItemInfo*
Arena::CreateMaybeMessage< ::Protocol::ItemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::ItemInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
