// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class ItemInfo;
struct ItemInfoDefaultTypeInternal;
extern ItemInfoDefaultTypeInternal _ItemInfo_default_instance_;
class MonsterAblity;
struct MonsterAblityDefaultTypeInternal;
extern MonsterAblityDefaultTypeInternal _MonsterAblity_default_instance_;
class MonsterInfo;
struct MonsterInfoDefaultTypeInternal;
extern MonsterInfoDefaultTypeInternal _MonsterInfo_default_instance_;
class MonsterMoveInfo;
struct MonsterMoveInfoDefaultTypeInternal;
extern MonsterMoveInfoDefaultTypeInternal _MonsterMoveInfo_default_instance_;
class NpcInfo;
struct NpcInfoDefaultTypeInternal;
extern NpcInfoDefaultTypeInternal _NpcInfo_default_instance_;
class ObjectInfo;
struct ObjectInfoDefaultTypeInternal;
extern ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
class PlayerAblity;
struct PlayerAblityDefaultTypeInternal;
extern PlayerAblityDefaultTypeInternal _PlayerAblity_default_instance_;
class PlayerInfo;
struct PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class PlayerMoveInfo;
struct PlayerMoveInfoDefaultTypeInternal;
extern PlayerMoveInfoDefaultTypeInternal _PlayerMoveInfo_default_instance_;
class PlayerUpdateInfo;
struct PlayerUpdateInfoDefaultTypeInternal;
extern PlayerUpdateInfoDefaultTypeInternal _PlayerUpdateInfo_default_instance_;
class PosInfo;
struct PosInfoDefaultTypeInternal;
extern PosInfoDefaultTypeInternal _PosInfo_default_instance_;
class ProjectileBasicInfo;
struct ProjectileBasicInfoDefaultTypeInternal;
extern ProjectileBasicInfoDefaultTypeInternal _ProjectileBasicInfo_default_instance_;
class ProjectileInfo;
struct ProjectileInfoDefaultTypeInternal;
extern ProjectileInfoDefaultTypeInternal _ProjectileInfo_default_instance_;
class SkillInfo;
struct SkillInfoDefaultTypeInternal;
extern SkillInfoDefaultTypeInternal _SkillInfo_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::ItemInfo* Arena::CreateMaybeMessage<::Protocol::ItemInfo>(Arena*);
template<> ::Protocol::MonsterAblity* Arena::CreateMaybeMessage<::Protocol::MonsterAblity>(Arena*);
template<> ::Protocol::MonsterInfo* Arena::CreateMaybeMessage<::Protocol::MonsterInfo>(Arena*);
template<> ::Protocol::MonsterMoveInfo* Arena::CreateMaybeMessage<::Protocol::MonsterMoveInfo>(Arena*);
template<> ::Protocol::NpcInfo* Arena::CreateMaybeMessage<::Protocol::NpcInfo>(Arena*);
template<> ::Protocol::ObjectInfo* Arena::CreateMaybeMessage<::Protocol::ObjectInfo>(Arena*);
template<> ::Protocol::PlayerAblity* Arena::CreateMaybeMessage<::Protocol::PlayerAblity>(Arena*);
template<> ::Protocol::PlayerInfo* Arena::CreateMaybeMessage<::Protocol::PlayerInfo>(Arena*);
template<> ::Protocol::PlayerMoveInfo* Arena::CreateMaybeMessage<::Protocol::PlayerMoveInfo>(Arena*);
template<> ::Protocol::PlayerUpdateInfo* Arena::CreateMaybeMessage<::Protocol::PlayerUpdateInfo>(Arena*);
template<> ::Protocol::PosInfo* Arena::CreateMaybeMessage<::Protocol::PosInfo>(Arena*);
template<> ::Protocol::ProjectileBasicInfo* Arena::CreateMaybeMessage<::Protocol::ProjectileBasicInfo>(Arena*);
template<> ::Protocol::ProjectileInfo* Arena::CreateMaybeMessage<::Protocol::ProjectileInfo>(Arena*);
template<> ::Protocol::SkillInfo* Arena::CreateMaybeMessage<::Protocol::SkillInfo>(Arena*);
template<> ::Protocol::Vector3* Arena::CreateMaybeMessage<::Protocol::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit PROTOBUF_CONSTEXPR Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3& from) {
    Vector3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PosInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PosInfo) */ {
 public:
  inline PosInfo() : PosInfo(nullptr) {}
  ~PosInfo() override;
  explicit PROTOBUF_CONSTEXPR PosInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PosInfo(const PosInfo& from);
  PosInfo(PosInfo&& from) noexcept
    : PosInfo() {
    *this = ::std::move(from);
  }

  inline PosInfo& operator=(const PosInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosInfo& operator=(PosInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PosInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PosInfo* internal_default_instance() {
    return reinterpret_cast<const PosInfo*>(
               &_PosInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PosInfo& a, PosInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PosInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PosInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PosInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PosInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PosInfo& from) {
    PosInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PosInfo";
  }
  protected:
  explicit PosInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kRotationFieldNumber = 3,
    kSizeFieldNumber = 4,
    kObjectIdFieldNumber = 1,
    kStateFieldNumber = 5,
  };
  // .Protocol.Vector3 Position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 Rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_rotation();
  ::Protocol::Vector3* mutable_rotation();
  void set_allocated_rotation(::Protocol::Vector3* rotation);
  private:
  const ::Protocol::Vector3& _internal_rotation() const;
  ::Protocol::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Vector3* rotation);
  ::Protocol::Vector3* unsafe_arena_release_rotation();

  // .Protocol.Vector3 Size = 4;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::Protocol::Vector3& size() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_size();
  ::Protocol::Vector3* mutable_size();
  void set_allocated_size(::Protocol::Vector3* size);
  private:
  const ::Protocol::Vector3& _internal_size() const;
  ::Protocol::Vector3* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::Protocol::Vector3* size);
  ::Protocol::Vector3* unsafe_arena_release_size();

  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // .Protocol.MoveState state = 5;
  void clear_state();
  ::Protocol::MoveState state() const;
  void set_state(::Protocol::MoveState value);
  private:
  ::Protocol::MoveState _internal_state() const;
  void _internal_set_state(::Protocol::MoveState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PosInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* rotation_;
    ::Protocol::Vector3* size_;
    uint64_t object_id_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ObjectInfo) */ {
 public:
  inline ObjectInfo() : ObjectInfo(nullptr) {}
  ~ObjectInfo() override;
  explicit PROTOBUF_CONSTEXPR ObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInfo(const ObjectInfo& from);
  ObjectInfo(ObjectInfo&& from) noexcept
    : ObjectInfo() {
    *this = ::std::move(from);
  }

  inline ObjectInfo& operator=(const ObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInfo& operator=(ObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInfo* internal_default_instance() {
    return reinterpret_cast<const ObjectInfo*>(
               &_ObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ObjectInfo& a, ObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectInfo& from) {
    ObjectInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ObjectInfo";
  }
  protected:
  explicit ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosInfoFieldNumber = 3,
    kObjectIdFieldNumber = 1,
    kObjectTypeFieldNumber = 2,
  };
  // .Protocol.PosInfo pos_info = 3;
  bool has_pos_info() const;
  private:
  bool _internal_has_pos_info() const;
  public:
  void clear_pos_info();
  const ::Protocol::PosInfo& pos_info() const;
  PROTOBUF_NODISCARD ::Protocol::PosInfo* release_pos_info();
  ::Protocol::PosInfo* mutable_pos_info();
  void set_allocated_pos_info(::Protocol::PosInfo* pos_info);
  private:
  const ::Protocol::PosInfo& _internal_pos_info() const;
  ::Protocol::PosInfo* _internal_mutable_pos_info();
  public:
  void unsafe_arena_set_allocated_pos_info(
      ::Protocol::PosInfo* pos_info);
  ::Protocol::PosInfo* unsafe_arena_release_pos_info();

  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // .Protocol.ObjectType object_type = 2;
  void clear_object_type();
  ::Protocol::ObjectType object_type() const;
  void set_object_type(::Protocol::ObjectType value);
  private:
  ::Protocol::ObjectType _internal_object_type() const;
  void _internal_set_object_type(::Protocol::ObjectType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PosInfo* pos_info_;
    uint64_t object_id_;
    int object_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  ~PlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerInfo& from) {
    PlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInfoFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kPlayerTypeFieldNumber = 2,
  };
  // .Protocol.ObjectInfo object_info = 3;
  bool has_object_info() const;
  private:
  bool _internal_has_object_info() const;
  public:
  void clear_object_info();
  const ::Protocol::ObjectInfo& object_info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_object_info();
  ::Protocol::ObjectInfo* mutable_object_info();
  void set_allocated_object_info(::Protocol::ObjectInfo* object_info);
  private:
  const ::Protocol::ObjectInfo& _internal_object_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_object_info();
  public:
  void unsafe_arena_set_allocated_object_info(
      ::Protocol::ObjectInfo* object_info);
  ::Protocol::ObjectInfo* unsafe_arena_release_object_info();

  // uint32 player_id = 1;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // .Protocol.PlayerType player_type = 2;
  void clear_player_type();
  ::Protocol::PlayerType player_type() const;
  void set_player_type(::Protocol::PlayerType value);
  private:
  ::Protocol::PlayerType _internal_player_type() const;
  void _internal_set_player_type(::Protocol::PlayerType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* object_info_;
    uint32_t player_id_;
    int player_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class MonsterInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.MonsterInfo) */ {
 public:
  inline MonsterInfo() : MonsterInfo(nullptr) {}
  ~MonsterInfo() override;
  explicit PROTOBUF_CONSTEXPR MonsterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonsterInfo(const MonsterInfo& from);
  MonsterInfo(MonsterInfo&& from) noexcept
    : MonsterInfo() {
    *this = ::std::move(from);
  }

  inline MonsterInfo& operator=(const MonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonsterInfo& operator=(MonsterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonsterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonsterInfo* internal_default_instance() {
    return reinterpret_cast<const MonsterInfo*>(
               &_MonsterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MonsterInfo& a, MonsterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MonsterInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonsterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonsterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonsterInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonsterInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MonsterInfo& from) {
    MonsterInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonsterInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.MonsterInfo";
  }
  protected:
  explicit MonsterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInfoFieldNumber = 3,
    kMonsterAblityFieldNumber = 4,
    kObjectIdFieldNumber = 1,
    kMonsterTypeFieldNumber = 2,
  };
  // .Protocol.ObjectInfo object_info = 3;
  bool has_object_info() const;
  private:
  bool _internal_has_object_info() const;
  public:
  void clear_object_info();
  const ::Protocol::ObjectInfo& object_info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_object_info();
  ::Protocol::ObjectInfo* mutable_object_info();
  void set_allocated_object_info(::Protocol::ObjectInfo* object_info);
  private:
  const ::Protocol::ObjectInfo& _internal_object_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_object_info();
  public:
  void unsafe_arena_set_allocated_object_info(
      ::Protocol::ObjectInfo* object_info);
  ::Protocol::ObjectInfo* unsafe_arena_release_object_info();

  // .Protocol.MonsterAblity monster_ablity = 4;
  bool has_monster_ablity() const;
  private:
  bool _internal_has_monster_ablity() const;
  public:
  void clear_monster_ablity();
  const ::Protocol::MonsterAblity& monster_ablity() const;
  PROTOBUF_NODISCARD ::Protocol::MonsterAblity* release_monster_ablity();
  ::Protocol::MonsterAblity* mutable_monster_ablity();
  void set_allocated_monster_ablity(::Protocol::MonsterAblity* monster_ablity);
  private:
  const ::Protocol::MonsterAblity& _internal_monster_ablity() const;
  ::Protocol::MonsterAblity* _internal_mutable_monster_ablity();
  public:
  void unsafe_arena_set_allocated_monster_ablity(
      ::Protocol::MonsterAblity* monster_ablity);
  ::Protocol::MonsterAblity* unsafe_arena_release_monster_ablity();

  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // .Protocol.MonsterType monster_type = 2;
  void clear_monster_type();
  ::Protocol::MonsterType monster_type() const;
  void set_monster_type(::Protocol::MonsterType value);
  private:
  ::Protocol::MonsterType _internal_monster_type() const;
  void _internal_set_monster_type(::Protocol::MonsterType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.MonsterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* object_info_;
    ::Protocol::MonsterAblity* monster_ablity_;
    uint64_t object_id_;
    int monster_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class MonsterMoveInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.MonsterMoveInfo) */ {
 public:
  inline MonsterMoveInfo() : MonsterMoveInfo(nullptr) {}
  ~MonsterMoveInfo() override;
  explicit PROTOBUF_CONSTEXPR MonsterMoveInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonsterMoveInfo(const MonsterMoveInfo& from);
  MonsterMoveInfo(MonsterMoveInfo&& from) noexcept
    : MonsterMoveInfo() {
    *this = ::std::move(from);
  }

  inline MonsterMoveInfo& operator=(const MonsterMoveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonsterMoveInfo& operator=(MonsterMoveInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonsterMoveInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonsterMoveInfo* internal_default_instance() {
    return reinterpret_cast<const MonsterMoveInfo*>(
               &_MonsterMoveInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MonsterMoveInfo& a, MonsterMoveInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MonsterMoveInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonsterMoveInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonsterMoveInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonsterMoveInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonsterMoveInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MonsterMoveInfo& from) {
    MonsterMoveInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonsterMoveInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.MonsterMoveInfo";
  }
  protected:
  explicit MonsterMoveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosInfoFieldNumber = 3,
    kObjectIdFieldNumber = 1,
    kMonsterTypeFieldNumber = 2,
  };
  // .Protocol.PosInfo pos_info = 3;
  bool has_pos_info() const;
  private:
  bool _internal_has_pos_info() const;
  public:
  void clear_pos_info();
  const ::Protocol::PosInfo& pos_info() const;
  PROTOBUF_NODISCARD ::Protocol::PosInfo* release_pos_info();
  ::Protocol::PosInfo* mutable_pos_info();
  void set_allocated_pos_info(::Protocol::PosInfo* pos_info);
  private:
  const ::Protocol::PosInfo& _internal_pos_info() const;
  ::Protocol::PosInfo* _internal_mutable_pos_info();
  public:
  void unsafe_arena_set_allocated_pos_info(
      ::Protocol::PosInfo* pos_info);
  ::Protocol::PosInfo* unsafe_arena_release_pos_info();

  // uint32 object_id = 1;
  void clear_object_id();
  uint32_t object_id() const;
  void set_object_id(uint32_t value);
  private:
  uint32_t _internal_object_id() const;
  void _internal_set_object_id(uint32_t value);
  public:

  // .Protocol.MonsterType monster_type = 2;
  void clear_monster_type();
  ::Protocol::MonsterType monster_type() const;
  void set_monster_type(::Protocol::MonsterType value);
  private:
  ::Protocol::MonsterType _internal_monster_type() const;
  void _internal_set_monster_type(::Protocol::MonsterType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.MonsterMoveInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PosInfo* pos_info_;
    uint32_t object_id_;
    int monster_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PlayerMoveInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PlayerMoveInfo) */ {
 public:
  inline PlayerMoveInfo() : PlayerMoveInfo(nullptr) {}
  ~PlayerMoveInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerMoveInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerMoveInfo(const PlayerMoveInfo& from);
  PlayerMoveInfo(PlayerMoveInfo&& from) noexcept
    : PlayerMoveInfo() {
    *this = ::std::move(from);
  }

  inline PlayerMoveInfo& operator=(const PlayerMoveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMoveInfo& operator=(PlayerMoveInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerMoveInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerMoveInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerMoveInfo*>(
               &_PlayerMoveInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlayerMoveInfo& a, PlayerMoveInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerMoveInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerMoveInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerMoveInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerMoveInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerMoveInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerMoveInfo& from) {
    PlayerMoveInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMoveInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PlayerMoveInfo";
  }
  protected:
  explicit PlayerMoveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosInfoFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // .Protocol.PosInfo pos_info = 2;
  bool has_pos_info() const;
  private:
  bool _internal_has_pos_info() const;
  public:
  void clear_pos_info();
  const ::Protocol::PosInfo& pos_info() const;
  PROTOBUF_NODISCARD ::Protocol::PosInfo* release_pos_info();
  ::Protocol::PosInfo* mutable_pos_info();
  void set_allocated_pos_info(::Protocol::PosInfo* pos_info);
  private:
  const ::Protocol::PosInfo& _internal_pos_info() const;
  ::Protocol::PosInfo* _internal_mutable_pos_info();
  public:
  void unsafe_arena_set_allocated_pos_info(
      ::Protocol::PosInfo* pos_info);
  ::Protocol::PosInfo* unsafe_arena_release_pos_info();

  // uint32 player_id = 1;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PlayerMoveInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PosInfo* pos_info_;
    uint32_t player_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PlayerAblity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PlayerAblity) */ {
 public:
  inline PlayerAblity() : PlayerAblity(nullptr) {}
  ~PlayerAblity() override;
  explicit PROTOBUF_CONSTEXPR PlayerAblity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerAblity(const PlayerAblity& from);
  PlayerAblity(PlayerAblity&& from) noexcept
    : PlayerAblity() {
    *this = ::std::move(from);
  }

  inline PlayerAblity& operator=(const PlayerAblity& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerAblity& operator=(PlayerAblity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerAblity& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerAblity* internal_default_instance() {
    return reinterpret_cast<const PlayerAblity*>(
               &_PlayerAblity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PlayerAblity& a, PlayerAblity& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerAblity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerAblity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerAblity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerAblity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerAblity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerAblity& from) {
    PlayerAblity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerAblity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PlayerAblity";
  }
  protected:
  explicit PlayerAblity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxhpFieldNumber = 1,
    kHpFieldNumber = 2,
    kDamageFieldNumber = 3,
    kSignaturegageFieldNumber = 4,
    kMaxsignaturegageFieldNumber = 5,
    kGoldFieldNumber = 6,
  };
  // uint32 maxhp = 1;
  void clear_maxhp();
  uint32_t maxhp() const;
  void set_maxhp(uint32_t value);
  private:
  uint32_t _internal_maxhp() const;
  void _internal_set_maxhp(uint32_t value);
  public:

  // uint32 hp = 2;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // uint32 damage = 3;
  void clear_damage();
  uint32_t damage() const;
  void set_damage(uint32_t value);
  private:
  uint32_t _internal_damage() const;
  void _internal_set_damage(uint32_t value);
  public:

  // float signaturegage = 4;
  void clear_signaturegage();
  float signaturegage() const;
  void set_signaturegage(float value);
  private:
  float _internal_signaturegage() const;
  void _internal_set_signaturegage(float value);
  public:

  // float maxsignaturegage = 5;
  void clear_maxsignaturegage();
  float maxsignaturegage() const;
  void set_maxsignaturegage(float value);
  private:
  float _internal_maxsignaturegage() const;
  void _internal_set_maxsignaturegage(float value);
  public:

  // uint32 gold = 6;
  void clear_gold();
  uint32_t gold() const;
  void set_gold(uint32_t value);
  private:
  uint32_t _internal_gold() const;
  void _internal_set_gold(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PlayerAblity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t maxhp_;
    uint32_t hp_;
    uint32_t damage_;
    float signaturegage_;
    float maxsignaturegage_;
    uint32_t gold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PlayerUpdateInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PlayerUpdateInfo) */ {
 public:
  inline PlayerUpdateInfo() : PlayerUpdateInfo(nullptr) {}
  ~PlayerUpdateInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerUpdateInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerUpdateInfo(const PlayerUpdateInfo& from);
  PlayerUpdateInfo(PlayerUpdateInfo&& from) noexcept
    : PlayerUpdateInfo() {
    *this = ::std::move(from);
  }

  inline PlayerUpdateInfo& operator=(const PlayerUpdateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerUpdateInfo& operator=(PlayerUpdateInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerUpdateInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerUpdateInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerUpdateInfo*>(
               &_PlayerUpdateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PlayerUpdateInfo& a, PlayerUpdateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerUpdateInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerUpdateInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerUpdateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerUpdateInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerUpdateInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerUpdateInfo& from) {
    PlayerUpdateInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerUpdateInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PlayerUpdateInfo";
  }
  protected:
  explicit PlayerUpdateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosInfoFieldNumber = 2,
    kPlayerAblityFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
  };
  // .Protocol.PosInfo pos_info = 2;
  bool has_pos_info() const;
  private:
  bool _internal_has_pos_info() const;
  public:
  void clear_pos_info();
  const ::Protocol::PosInfo& pos_info() const;
  PROTOBUF_NODISCARD ::Protocol::PosInfo* release_pos_info();
  ::Protocol::PosInfo* mutable_pos_info();
  void set_allocated_pos_info(::Protocol::PosInfo* pos_info);
  private:
  const ::Protocol::PosInfo& _internal_pos_info() const;
  ::Protocol::PosInfo* _internal_mutable_pos_info();
  public:
  void unsafe_arena_set_allocated_pos_info(
      ::Protocol::PosInfo* pos_info);
  ::Protocol::PosInfo* unsafe_arena_release_pos_info();

  // .Protocol.PlayerAblity player_ablity = 3;
  bool has_player_ablity() const;
  private:
  bool _internal_has_player_ablity() const;
  public:
  void clear_player_ablity();
  const ::Protocol::PlayerAblity& player_ablity() const;
  PROTOBUF_NODISCARD ::Protocol::PlayerAblity* release_player_ablity();
  ::Protocol::PlayerAblity* mutable_player_ablity();
  void set_allocated_player_ablity(::Protocol::PlayerAblity* player_ablity);
  private:
  const ::Protocol::PlayerAblity& _internal_player_ablity() const;
  ::Protocol::PlayerAblity* _internal_mutable_player_ablity();
  public:
  void unsafe_arena_set_allocated_player_ablity(
      ::Protocol::PlayerAblity* player_ablity);
  ::Protocol::PlayerAblity* unsafe_arena_release_player_ablity();

  // uint32 player_id = 1;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PlayerUpdateInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PosInfo* pos_info_;
    ::Protocol::PlayerAblity* player_ablity_;
    uint32_t player_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class MonsterAblity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.MonsterAblity) */ {
 public:
  inline MonsterAblity() : MonsterAblity(nullptr) {}
  ~MonsterAblity() override;
  explicit PROTOBUF_CONSTEXPR MonsterAblity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonsterAblity(const MonsterAblity& from);
  MonsterAblity(MonsterAblity&& from) noexcept
    : MonsterAblity() {
    *this = ::std::move(from);
  }

  inline MonsterAblity& operator=(const MonsterAblity& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonsterAblity& operator=(MonsterAblity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonsterAblity& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonsterAblity* internal_default_instance() {
    return reinterpret_cast<const MonsterAblity*>(
               &_MonsterAblity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MonsterAblity& a, MonsterAblity& b) {
    a.Swap(&b);
  }
  inline void Swap(MonsterAblity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonsterAblity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonsterAblity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonsterAblity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonsterAblity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MonsterAblity& from) {
    MonsterAblity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonsterAblity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.MonsterAblity";
  }
  protected:
  explicit MonsterAblity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxhpFieldNumber = 1,
    kHpFieldNumber = 2,
  };
  // uint32 maxhp = 1;
  void clear_maxhp();
  uint32_t maxhp() const;
  void set_maxhp(uint32_t value);
  private:
  uint32_t _internal_maxhp() const;
  void _internal_set_maxhp(uint32_t value);
  public:

  // uint32 hp = 2;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.MonsterAblity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t maxhp_;
    uint32_t hp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ProjectileBasicInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ProjectileBasicInfo) */ {
 public:
  inline ProjectileBasicInfo() : ProjectileBasicInfo(nullptr) {}
  ~ProjectileBasicInfo() override;
  explicit PROTOBUF_CONSTEXPR ProjectileBasicInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectileBasicInfo(const ProjectileBasicInfo& from);
  ProjectileBasicInfo(ProjectileBasicInfo&& from) noexcept
    : ProjectileBasicInfo() {
    *this = ::std::move(from);
  }

  inline ProjectileBasicInfo& operator=(const ProjectileBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectileBasicInfo& operator=(ProjectileBasicInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectileBasicInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectileBasicInfo* internal_default_instance() {
    return reinterpret_cast<const ProjectileBasicInfo*>(
               &_ProjectileBasicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ProjectileBasicInfo& a, ProjectileBasicInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectileBasicInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectileBasicInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectileBasicInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectileBasicInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectileBasicInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProjectileBasicInfo& from) {
    ProjectileBasicInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectileBasicInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ProjectileBasicInfo";
  }
  protected:
  explicit ProjectileBasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirFieldNumber = 6,
    kSizeFieldNumber = 7,
    kSpawnPosFieldNumber = 8,
    kNewProjectileIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kDurationFieldNumber = 3,
    kSpeedFieldNumber = 4,
    kDamageFieldNumber = 5,
    kBCollisionExplosionFieldNumber = 9,
  };
  // .Protocol.Vector3 dir = 6;
  bool has_dir() const;
  private:
  bool _internal_has_dir() const;
  public:
  void clear_dir();
  const ::Protocol::Vector3& dir() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_dir();
  ::Protocol::Vector3* mutable_dir();
  void set_allocated_dir(::Protocol::Vector3* dir);
  private:
  const ::Protocol::Vector3& _internal_dir() const;
  ::Protocol::Vector3* _internal_mutable_dir();
  public:
  void unsafe_arena_set_allocated_dir(
      ::Protocol::Vector3* dir);
  ::Protocol::Vector3* unsafe_arena_release_dir();

  // .Protocol.Vector3 size = 7;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::Protocol::Vector3& size() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_size();
  ::Protocol::Vector3* mutable_size();
  void set_allocated_size(::Protocol::Vector3* size);
  private:
  const ::Protocol::Vector3& _internal_size() const;
  ::Protocol::Vector3* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::Protocol::Vector3* size);
  ::Protocol::Vector3* unsafe_arena_release_size();

  // .Protocol.Vector3 spawn_pos = 8;
  bool has_spawn_pos() const;
  private:
  bool _internal_has_spawn_pos() const;
  public:
  void clear_spawn_pos();
  const ::Protocol::Vector3& spawn_pos() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_spawn_pos();
  ::Protocol::Vector3* mutable_spawn_pos();
  void set_allocated_spawn_pos(::Protocol::Vector3* spawn_pos);
  private:
  const ::Protocol::Vector3& _internal_spawn_pos() const;
  ::Protocol::Vector3* _internal_mutable_spawn_pos();
  public:
  void unsafe_arena_set_allocated_spawn_pos(
      ::Protocol::Vector3* spawn_pos);
  ::Protocol::Vector3* unsafe_arena_release_spawn_pos();

  // uint64 new_projectile_id = 1;
  void clear_new_projectile_id();
  uint64_t new_projectile_id() const;
  void set_new_projectile_id(uint64_t value);
  private:
  uint64_t _internal_new_projectile_id() const;
  void _internal_set_new_projectile_id(uint64_t value);
  public:

  // uint32 player_id = 2;
  void clear_player_id();
  uint32_t player_id() const;
  void set_player_id(uint32_t value);
  private:
  uint32_t _internal_player_id() const;
  void _internal_set_player_id(uint32_t value);
  public:

  // float duration = 3;
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // float speed = 4;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // uint32 damage = 5;
  void clear_damage();
  uint32_t damage() const;
  void set_damage(uint32_t value);
  private:
  uint32_t _internal_damage() const;
  void _internal_set_damage(uint32_t value);
  public:

  // bool bCollisionExplosion = 9;
  void clear_bcollisionexplosion();
  bool bcollisionexplosion() const;
  void set_bcollisionexplosion(bool value);
  private:
  bool _internal_bcollisionexplosion() const;
  void _internal_set_bcollisionexplosion(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ProjectileBasicInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* dir_;
    ::Protocol::Vector3* size_;
    ::Protocol::Vector3* spawn_pos_;
    uint64_t new_projectile_id_;
    uint32_t player_id_;
    float duration_;
    float speed_;
    uint32_t damage_;
    bool bcollisionexplosion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ProjectileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ProjectileInfo) */ {
 public:
  inline ProjectileInfo() : ProjectileInfo(nullptr) {}
  ~ProjectileInfo() override;
  explicit PROTOBUF_CONSTEXPR ProjectileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectileInfo(const ProjectileInfo& from);
  ProjectileInfo(ProjectileInfo&& from) noexcept
    : ProjectileInfo() {
    *this = ::std::move(from);
  }

  inline ProjectileInfo& operator=(const ProjectileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectileInfo& operator=(ProjectileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectileInfo* internal_default_instance() {
    return reinterpret_cast<const ProjectileInfo*>(
               &_ProjectileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ProjectileInfo& a, ProjectileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectileInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectileInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProjectileInfo& from) {
    ProjectileInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ProjectileInfo";
  }
  protected:
  explicit ProjectileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInfoFieldNumber = 3,
    kProjectileIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .Protocol.ObjectInfo object_info = 3;
  bool has_object_info() const;
  private:
  bool _internal_has_object_info() const;
  public:
  void clear_object_info();
  const ::Protocol::ObjectInfo& object_info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_object_info();
  ::Protocol::ObjectInfo* mutable_object_info();
  void set_allocated_object_info(::Protocol::ObjectInfo* object_info);
  private:
  const ::Protocol::ObjectInfo& _internal_object_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_object_info();
  public:
  void unsafe_arena_set_allocated_object_info(
      ::Protocol::ObjectInfo* object_info);
  ::Protocol::ObjectInfo* unsafe_arena_release_object_info();

  // uint64 Projectile_id = 1;
  void clear_projectile_id();
  uint64_t projectile_id() const;
  void set_projectile_id(uint64_t value);
  private:
  uint64_t _internal_projectile_id() const;
  void _internal_set_projectile_id(uint64_t value);
  public:

  // .Protocol.ProjectileState state = 2;
  void clear_state();
  ::Protocol::ProjectileState state() const;
  void set_state(::Protocol::ProjectileState value);
  private:
  ::Protocol::ProjectileState _internal_state() const;
  void _internal_set_state(::Protocol::ProjectileState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ProjectileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* object_info_;
    uint64_t projectile_id_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class NpcInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.NpcInfo) */ {
 public:
  inline NpcInfo() : NpcInfo(nullptr) {}
  ~NpcInfo() override;
  explicit PROTOBUF_CONSTEXPR NpcInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NpcInfo(const NpcInfo& from);
  NpcInfo(NpcInfo&& from) noexcept
    : NpcInfo() {
    *this = ::std::move(from);
  }

  inline NpcInfo& operator=(const NpcInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NpcInfo& operator=(NpcInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NpcInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NpcInfo* internal_default_instance() {
    return reinterpret_cast<const NpcInfo*>(
               &_NpcInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(NpcInfo& a, NpcInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NpcInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NpcInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NpcInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NpcInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NpcInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NpcInfo& from) {
    NpcInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NpcInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.NpcInfo";
  }
  protected:
  explicit NpcInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 3,
    kSkillIdFieldNumber = 4,
    kObjectInfoFieldNumber = 2,
    kObjectIdFieldNumber = 1,
  };
  // repeated uint32 item_id = 3;
  int item_id_size() const;
  private:
  int _internal_item_id_size() const;
  public:
  void clear_item_id();
  private:
  uint32_t _internal_item_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_item_id() const;
  void _internal_add_item_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_item_id();
  public:
  uint32_t item_id(int index) const;
  void set_item_id(int index, uint32_t value);
  void add_item_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      item_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_item_id();

  // repeated uint32 skill_id = 4;
  int skill_id_size() const;
  private:
  int _internal_skill_id_size() const;
  public:
  void clear_skill_id();
  private:
  uint32_t _internal_skill_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_skill_id() const;
  void _internal_add_skill_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_skill_id();
  public:
  uint32_t skill_id(int index) const;
  void set_skill_id(int index, uint32_t value);
  void add_skill_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      skill_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_skill_id();

  // .Protocol.ObjectInfo object_info = 2;
  bool has_object_info() const;
  private:
  bool _internal_has_object_info() const;
  public:
  void clear_object_info();
  const ::Protocol::ObjectInfo& object_info() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_object_info();
  ::Protocol::ObjectInfo* mutable_object_info();
  void set_allocated_object_info(::Protocol::ObjectInfo* object_info);
  private:
  const ::Protocol::ObjectInfo& _internal_object_info() const;
  ::Protocol::ObjectInfo* _internal_mutable_object_info();
  public:
  void unsafe_arena_set_allocated_object_info(
      ::Protocol::ObjectInfo* object_info);
  ::Protocol::ObjectInfo* unsafe_arena_release_object_info();

  // uint32 object_id = 1;
  void clear_object_id();
  uint32_t object_id() const;
  void set_object_id(uint32_t value);
  private:
  uint32_t _internal_object_id() const;
  void _internal_set_object_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.NpcInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > item_id_;
    mutable std::atomic<int> _item_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > skill_id_;
    mutable std::atomic<int> _skill_id_cached_byte_size_;
    ::Protocol::ObjectInfo* object_info_;
    uint32_t object_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ItemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ItemInfo) */ {
 public:
  inline ItemInfo() : ItemInfo(nullptr) {}
  ~ItemInfo() override;
  explicit PROTOBUF_CONSTEXPR ItemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemInfo(const ItemInfo& from);
  ItemInfo(ItemInfo&& from) noexcept
    : ItemInfo() {
    *this = ::std::move(from);
  }

  inline ItemInfo& operator=(const ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemInfo& operator=(ItemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemInfo* internal_default_instance() {
    return reinterpret_cast<const ItemInfo*>(
               &_ItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ItemInfo& a, ItemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ItemInfo& from) {
    ItemInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ItemInfo";
  }
  protected:
  explicit ItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kIsSellFieldNumber = 2,
  };
  // uint32 item_id = 1;
  void clear_item_id();
  uint32_t item_id() const;
  void set_item_id(uint32_t value);
  private:
  uint32_t _internal_item_id() const;
  void _internal_set_item_id(uint32_t value);
  public:

  // bool is_sell = 2;
  void clear_is_sell();
  bool is_sell() const;
  void set_is_sell(bool value);
  private:
  bool _internal_is_sell() const;
  void _internal_set_is_sell(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ItemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t item_id_;
    bool is_sell_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class SkillInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SkillInfo) */ {
 public:
  inline SkillInfo() : SkillInfo(nullptr) {}
  ~SkillInfo() override;
  explicit PROTOBUF_CONSTEXPR SkillInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkillInfo(const SkillInfo& from);
  SkillInfo(SkillInfo&& from) noexcept
    : SkillInfo() {
    *this = ::std::move(from);
  }

  inline SkillInfo& operator=(const SkillInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkillInfo& operator=(SkillInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkillInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkillInfo* internal_default_instance() {
    return reinterpret_cast<const SkillInfo*>(
               &_SkillInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SkillInfo& a, SkillInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SkillInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkillInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkillInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SkillInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SkillInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SkillInfo& from) {
    SkillInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkillInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SkillInfo";
  }
  protected:
  explicit SkillInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillIdFieldNumber = 1,
    kIsSellFieldNumber = 2,
  };
  // uint32 skill_id = 1;
  void clear_skill_id();
  uint32_t skill_id() const;
  void set_skill_id(uint32_t value);
  private:
  uint32_t _internal_skill_id() const;
  void _internal_set_skill_id(uint32_t value);
  public:

  // bool is_sell = 2;
  void clear_is_sell();
  bool is_sell() const;
  void set_is_sell(bool value);
  private:
  bool _internal_is_sell() const;
  void _internal_set_is_sell(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SkillInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t skill_id_;
    bool is_sell_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector3::_internal_x() const {
  return _impl_.x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector3::_internal_y() const {
  return _impl_.y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector3::_internal_z() const {
  return _impl_.z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.z)
}

// -------------------------------------------------------------------

// PosInfo

// uint64 object_id = 1;
inline void PosInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t PosInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t PosInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.object_id)
  return _internal_object_id();
}
inline void PosInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void PosInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.object_id)
}

// .Protocol.Vector3 Position = 2;
inline bool PosInfo::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool PosInfo::has_position() const {
  return _internal_has_position();
}
inline void PosInfo::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::Protocol::Vector3& PosInfo::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& PosInfo::position() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.Position)
  return _internal_position();
}
inline void PosInfo::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PosInfo.Position)
}
inline ::Protocol::Vector3* PosInfo::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* PosInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.PosInfo.Position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* PosInfo::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* PosInfo::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.PosInfo.Position)
  return _msg;
}
inline void PosInfo::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PosInfo.Position)
}

// .Protocol.Vector3 Rotation = 3;
inline bool PosInfo::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool PosInfo::has_rotation() const {
  return _internal_has_rotation();
}
inline void PosInfo::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Protocol::Vector3& PosInfo::_internal_rotation() const {
  const ::Protocol::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& PosInfo::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.Rotation)
  return _internal_rotation();
}
inline void PosInfo::unsafe_arena_set_allocated_rotation(
    ::Protocol::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PosInfo.Rotation)
}
inline ::Protocol::Vector3* PosInfo::release_rotation() {
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* PosInfo::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.PosInfo.Rotation)
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* PosInfo::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Vector3* PosInfo::mutable_rotation() {
  ::Protocol::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.PosInfo.Rotation)
  return _msg;
}
inline void PosInfo::set_allocated_rotation(::Protocol::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PosInfo.Rotation)
}

// .Protocol.Vector3 Size = 4;
inline bool PosInfo::_internal_has_size() const {
  return this != internal_default_instance() && _impl_.size_ != nullptr;
}
inline bool PosInfo::has_size() const {
  return _internal_has_size();
}
inline void PosInfo::clear_size() {
  if (GetArenaForAllocation() == nullptr && _impl_.size_ != nullptr) {
    delete _impl_.size_;
  }
  _impl_.size_ = nullptr;
}
inline const ::Protocol::Vector3& PosInfo::_internal_size() const {
  const ::Protocol::Vector3* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& PosInfo::size() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.Size)
  return _internal_size();
}
inline void PosInfo::unsafe_arena_set_allocated_size(
    ::Protocol::Vector3* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PosInfo.Size)
}
inline ::Protocol::Vector3* PosInfo::release_size() {
  
  ::Protocol::Vector3* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* PosInfo::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:Protocol.PosInfo.Size)
  
  ::Protocol::Vector3* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* PosInfo::_internal_mutable_size() {
  
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::Protocol::Vector3* PosInfo::mutable_size() {
  ::Protocol::Vector3* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:Protocol.PosInfo.Size)
  return _msg;
}
inline void PosInfo::set_allocated_size(::Protocol::Vector3* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PosInfo.Size)
}

// .Protocol.MoveState state = 5;
inline void PosInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::MoveState PosInfo::_internal_state() const {
  return static_cast< ::Protocol::MoveState >(_impl_.state_);
}
inline ::Protocol::MoveState PosInfo::state() const {
  // @@protoc_insertion_point(field_get:Protocol.PosInfo.state)
  return _internal_state();
}
inline void PosInfo::_internal_set_state(::Protocol::MoveState value) {
  
  _impl_.state_ = value;
}
inline void PosInfo::set_state(::Protocol::MoveState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.PosInfo.state)
}

// -------------------------------------------------------------------

// ObjectInfo

// uint64 object_id = 1;
inline void ObjectInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t ObjectInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t ObjectInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.object_id)
  return _internal_object_id();
}
inline void ObjectInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void ObjectInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.object_id)
}

// .Protocol.ObjectType object_type = 2;
inline void ObjectInfo::clear_object_type() {
  _impl_.object_type_ = 0;
}
inline ::Protocol::ObjectType ObjectInfo::_internal_object_type() const {
  return static_cast< ::Protocol::ObjectType >(_impl_.object_type_);
}
inline ::Protocol::ObjectType ObjectInfo::object_type() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.object_type)
  return _internal_object_type();
}
inline void ObjectInfo::_internal_set_object_type(::Protocol::ObjectType value) {
  
  _impl_.object_type_ = value;
}
inline void ObjectInfo::set_object_type(::Protocol::ObjectType value) {
  _internal_set_object_type(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.object_type)
}

// .Protocol.PosInfo pos_info = 3;
inline bool ObjectInfo::_internal_has_pos_info() const {
  return this != internal_default_instance() && _impl_.pos_info_ != nullptr;
}
inline bool ObjectInfo::has_pos_info() const {
  return _internal_has_pos_info();
}
inline void ObjectInfo::clear_pos_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
}
inline const ::Protocol::PosInfo& ObjectInfo::_internal_pos_info() const {
  const ::Protocol::PosInfo* p = _impl_.pos_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PosInfo&>(
      ::Protocol::_PosInfo_default_instance_);
}
inline const ::Protocol::PosInfo& ObjectInfo::pos_info() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.pos_info)
  return _internal_pos_info();
}
inline void ObjectInfo::unsafe_arena_set_allocated_pos_info(
    ::Protocol::PosInfo* pos_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_info_);
  }
  _impl_.pos_info_ = pos_info;
  if (pos_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ObjectInfo.pos_info)
}
inline ::Protocol::PosInfo* ObjectInfo::release_pos_info() {
  
  ::Protocol::PosInfo* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PosInfo* ObjectInfo::unsafe_arena_release_pos_info() {
  // @@protoc_insertion_point(field_release:Protocol.ObjectInfo.pos_info)
  
  ::Protocol::PosInfo* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
  return temp;
}
inline ::Protocol::PosInfo* ObjectInfo::_internal_mutable_pos_info() {
  
  if (_impl_.pos_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PosInfo>(GetArenaForAllocation());
    _impl_.pos_info_ = p;
  }
  return _impl_.pos_info_;
}
inline ::Protocol::PosInfo* ObjectInfo::mutable_pos_info() {
  ::Protocol::PosInfo* _msg = _internal_mutable_pos_info();
  // @@protoc_insertion_point(field_mutable:Protocol.ObjectInfo.pos_info)
  return _msg;
}
inline void ObjectInfo::set_allocated_pos_info(::Protocol::PosInfo* pos_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_info_;
  }
  if (pos_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos_info);
    if (message_arena != submessage_arena) {
      pos_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_info_ = pos_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ObjectInfo.pos_info)
}

// -------------------------------------------------------------------

// PlayerInfo

// uint32 player_id = 1;
inline void PlayerInfo::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t PlayerInfo::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t PlayerInfo::player_id() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.player_id)
  return _internal_player_id();
}
inline void PlayerInfo::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void PlayerInfo::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.player_id)
}

// .Protocol.PlayerType player_type = 2;
inline void PlayerInfo::clear_player_type() {
  _impl_.player_type_ = 0;
}
inline ::Protocol::PlayerType PlayerInfo::_internal_player_type() const {
  return static_cast< ::Protocol::PlayerType >(_impl_.player_type_);
}
inline ::Protocol::PlayerType PlayerInfo::player_type() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.player_type)
  return _internal_player_type();
}
inline void PlayerInfo::_internal_set_player_type(::Protocol::PlayerType value) {
  
  _impl_.player_type_ = value;
}
inline void PlayerInfo::set_player_type(::Protocol::PlayerType value) {
  _internal_set_player_type(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.player_type)
}

// .Protocol.ObjectInfo object_info = 3;
inline bool PlayerInfo::_internal_has_object_info() const {
  return this != internal_default_instance() && _impl_.object_info_ != nullptr;
}
inline bool PlayerInfo::has_object_info() const {
  return _internal_has_object_info();
}
inline void PlayerInfo::clear_object_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.object_info_ != nullptr) {
    delete _impl_.object_info_;
  }
  _impl_.object_info_ = nullptr;
}
inline const ::Protocol::ObjectInfo& PlayerInfo::_internal_object_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.object_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& PlayerInfo::object_info() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.object_info)
  return _internal_object_info();
}
inline void PlayerInfo::unsafe_arena_set_allocated_object_info(
    ::Protocol::ObjectInfo* object_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_info_);
  }
  _impl_.object_info_ = object_info;
  if (object_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PlayerInfo.object_info)
}
inline ::Protocol::ObjectInfo* PlayerInfo::release_object_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.object_info_;
  _impl_.object_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* PlayerInfo::unsafe_arena_release_object_info() {
  // @@protoc_insertion_point(field_release:Protocol.PlayerInfo.object_info)
  
  ::Protocol::ObjectInfo* temp = _impl_.object_info_;
  _impl_.object_info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* PlayerInfo::_internal_mutable_object_info() {
  
  if (_impl_.object_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.object_info_ = p;
  }
  return _impl_.object_info_;
}
inline ::Protocol::ObjectInfo* PlayerInfo::mutable_object_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_object_info();
  // @@protoc_insertion_point(field_mutable:Protocol.PlayerInfo.object_info)
  return _msg;
}
inline void PlayerInfo::set_allocated_object_info(::Protocol::ObjectInfo* object_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_info_;
  }
  if (object_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object_info);
    if (message_arena != submessage_arena) {
      object_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.object_info_ = object_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PlayerInfo.object_info)
}

// -------------------------------------------------------------------

// MonsterInfo

// uint64 object_id = 1;
inline void MonsterInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t MonsterInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t MonsterInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterInfo.object_id)
  return _internal_object_id();
}
inline void MonsterInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void MonsterInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.MonsterInfo.object_id)
}

// .Protocol.MonsterType monster_type = 2;
inline void MonsterInfo::clear_monster_type() {
  _impl_.monster_type_ = 0;
}
inline ::Protocol::MonsterType MonsterInfo::_internal_monster_type() const {
  return static_cast< ::Protocol::MonsterType >(_impl_.monster_type_);
}
inline ::Protocol::MonsterType MonsterInfo::monster_type() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterInfo.monster_type)
  return _internal_monster_type();
}
inline void MonsterInfo::_internal_set_monster_type(::Protocol::MonsterType value) {
  
  _impl_.monster_type_ = value;
}
inline void MonsterInfo::set_monster_type(::Protocol::MonsterType value) {
  _internal_set_monster_type(value);
  // @@protoc_insertion_point(field_set:Protocol.MonsterInfo.monster_type)
}

// .Protocol.ObjectInfo object_info = 3;
inline bool MonsterInfo::_internal_has_object_info() const {
  return this != internal_default_instance() && _impl_.object_info_ != nullptr;
}
inline bool MonsterInfo::has_object_info() const {
  return _internal_has_object_info();
}
inline void MonsterInfo::clear_object_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.object_info_ != nullptr) {
    delete _impl_.object_info_;
  }
  _impl_.object_info_ = nullptr;
}
inline const ::Protocol::ObjectInfo& MonsterInfo::_internal_object_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.object_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& MonsterInfo::object_info() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterInfo.object_info)
  return _internal_object_info();
}
inline void MonsterInfo::unsafe_arena_set_allocated_object_info(
    ::Protocol::ObjectInfo* object_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_info_);
  }
  _impl_.object_info_ = object_info;
  if (object_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.MonsterInfo.object_info)
}
inline ::Protocol::ObjectInfo* MonsterInfo::release_object_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.object_info_;
  _impl_.object_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* MonsterInfo::unsafe_arena_release_object_info() {
  // @@protoc_insertion_point(field_release:Protocol.MonsterInfo.object_info)
  
  ::Protocol::ObjectInfo* temp = _impl_.object_info_;
  _impl_.object_info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* MonsterInfo::_internal_mutable_object_info() {
  
  if (_impl_.object_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.object_info_ = p;
  }
  return _impl_.object_info_;
}
inline ::Protocol::ObjectInfo* MonsterInfo::mutable_object_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_object_info();
  // @@protoc_insertion_point(field_mutable:Protocol.MonsterInfo.object_info)
  return _msg;
}
inline void MonsterInfo::set_allocated_object_info(::Protocol::ObjectInfo* object_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_info_;
  }
  if (object_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object_info);
    if (message_arena != submessage_arena) {
      object_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.object_info_ = object_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.MonsterInfo.object_info)
}

// .Protocol.MonsterAblity monster_ablity = 4;
inline bool MonsterInfo::_internal_has_monster_ablity() const {
  return this != internal_default_instance() && _impl_.monster_ablity_ != nullptr;
}
inline bool MonsterInfo::has_monster_ablity() const {
  return _internal_has_monster_ablity();
}
inline void MonsterInfo::clear_monster_ablity() {
  if (GetArenaForAllocation() == nullptr && _impl_.monster_ablity_ != nullptr) {
    delete _impl_.monster_ablity_;
  }
  _impl_.monster_ablity_ = nullptr;
}
inline const ::Protocol::MonsterAblity& MonsterInfo::_internal_monster_ablity() const {
  const ::Protocol::MonsterAblity* p = _impl_.monster_ablity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::MonsterAblity&>(
      ::Protocol::_MonsterAblity_default_instance_);
}
inline const ::Protocol::MonsterAblity& MonsterInfo::monster_ablity() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterInfo.monster_ablity)
  return _internal_monster_ablity();
}
inline void MonsterInfo::unsafe_arena_set_allocated_monster_ablity(
    ::Protocol::MonsterAblity* monster_ablity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.monster_ablity_);
  }
  _impl_.monster_ablity_ = monster_ablity;
  if (monster_ablity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.MonsterInfo.monster_ablity)
}
inline ::Protocol::MonsterAblity* MonsterInfo::release_monster_ablity() {
  
  ::Protocol::MonsterAblity* temp = _impl_.monster_ablity_;
  _impl_.monster_ablity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::MonsterAblity* MonsterInfo::unsafe_arena_release_monster_ablity() {
  // @@protoc_insertion_point(field_release:Protocol.MonsterInfo.monster_ablity)
  
  ::Protocol::MonsterAblity* temp = _impl_.monster_ablity_;
  _impl_.monster_ablity_ = nullptr;
  return temp;
}
inline ::Protocol::MonsterAblity* MonsterInfo::_internal_mutable_monster_ablity() {
  
  if (_impl_.monster_ablity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::MonsterAblity>(GetArenaForAllocation());
    _impl_.monster_ablity_ = p;
  }
  return _impl_.monster_ablity_;
}
inline ::Protocol::MonsterAblity* MonsterInfo::mutable_monster_ablity() {
  ::Protocol::MonsterAblity* _msg = _internal_mutable_monster_ablity();
  // @@protoc_insertion_point(field_mutable:Protocol.MonsterInfo.monster_ablity)
  return _msg;
}
inline void MonsterInfo::set_allocated_monster_ablity(::Protocol::MonsterAblity* monster_ablity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.monster_ablity_;
  }
  if (monster_ablity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(monster_ablity);
    if (message_arena != submessage_arena) {
      monster_ablity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monster_ablity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.monster_ablity_ = monster_ablity;
  // @@protoc_insertion_point(field_set_allocated:Protocol.MonsterInfo.monster_ablity)
}

// -------------------------------------------------------------------

// MonsterMoveInfo

// uint32 object_id = 1;
inline void MonsterMoveInfo::clear_object_id() {
  _impl_.object_id_ = 0u;
}
inline uint32_t MonsterMoveInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint32_t MonsterMoveInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterMoveInfo.object_id)
  return _internal_object_id();
}
inline void MonsterMoveInfo::_internal_set_object_id(uint32_t value) {
  
  _impl_.object_id_ = value;
}
inline void MonsterMoveInfo::set_object_id(uint32_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.MonsterMoveInfo.object_id)
}

// .Protocol.MonsterType monster_type = 2;
inline void MonsterMoveInfo::clear_monster_type() {
  _impl_.monster_type_ = 0;
}
inline ::Protocol::MonsterType MonsterMoveInfo::_internal_monster_type() const {
  return static_cast< ::Protocol::MonsterType >(_impl_.monster_type_);
}
inline ::Protocol::MonsterType MonsterMoveInfo::monster_type() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterMoveInfo.monster_type)
  return _internal_monster_type();
}
inline void MonsterMoveInfo::_internal_set_monster_type(::Protocol::MonsterType value) {
  
  _impl_.monster_type_ = value;
}
inline void MonsterMoveInfo::set_monster_type(::Protocol::MonsterType value) {
  _internal_set_monster_type(value);
  // @@protoc_insertion_point(field_set:Protocol.MonsterMoveInfo.monster_type)
}

// .Protocol.PosInfo pos_info = 3;
inline bool MonsterMoveInfo::_internal_has_pos_info() const {
  return this != internal_default_instance() && _impl_.pos_info_ != nullptr;
}
inline bool MonsterMoveInfo::has_pos_info() const {
  return _internal_has_pos_info();
}
inline void MonsterMoveInfo::clear_pos_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
}
inline const ::Protocol::PosInfo& MonsterMoveInfo::_internal_pos_info() const {
  const ::Protocol::PosInfo* p = _impl_.pos_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PosInfo&>(
      ::Protocol::_PosInfo_default_instance_);
}
inline const ::Protocol::PosInfo& MonsterMoveInfo::pos_info() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterMoveInfo.pos_info)
  return _internal_pos_info();
}
inline void MonsterMoveInfo::unsafe_arena_set_allocated_pos_info(
    ::Protocol::PosInfo* pos_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_info_);
  }
  _impl_.pos_info_ = pos_info;
  if (pos_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.MonsterMoveInfo.pos_info)
}
inline ::Protocol::PosInfo* MonsterMoveInfo::release_pos_info() {
  
  ::Protocol::PosInfo* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PosInfo* MonsterMoveInfo::unsafe_arena_release_pos_info() {
  // @@protoc_insertion_point(field_release:Protocol.MonsterMoveInfo.pos_info)
  
  ::Protocol::PosInfo* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
  return temp;
}
inline ::Protocol::PosInfo* MonsterMoveInfo::_internal_mutable_pos_info() {
  
  if (_impl_.pos_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PosInfo>(GetArenaForAllocation());
    _impl_.pos_info_ = p;
  }
  return _impl_.pos_info_;
}
inline ::Protocol::PosInfo* MonsterMoveInfo::mutable_pos_info() {
  ::Protocol::PosInfo* _msg = _internal_mutable_pos_info();
  // @@protoc_insertion_point(field_mutable:Protocol.MonsterMoveInfo.pos_info)
  return _msg;
}
inline void MonsterMoveInfo::set_allocated_pos_info(::Protocol::PosInfo* pos_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_info_;
  }
  if (pos_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos_info);
    if (message_arena != submessage_arena) {
      pos_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_info_ = pos_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.MonsterMoveInfo.pos_info)
}

// -------------------------------------------------------------------

// PlayerMoveInfo

// uint32 player_id = 1;
inline void PlayerMoveInfo::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t PlayerMoveInfo::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t PlayerMoveInfo::player_id() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerMoveInfo.player_id)
  return _internal_player_id();
}
inline void PlayerMoveInfo::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void PlayerMoveInfo::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerMoveInfo.player_id)
}

// .Protocol.PosInfo pos_info = 2;
inline bool PlayerMoveInfo::_internal_has_pos_info() const {
  return this != internal_default_instance() && _impl_.pos_info_ != nullptr;
}
inline bool PlayerMoveInfo::has_pos_info() const {
  return _internal_has_pos_info();
}
inline void PlayerMoveInfo::clear_pos_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
}
inline const ::Protocol::PosInfo& PlayerMoveInfo::_internal_pos_info() const {
  const ::Protocol::PosInfo* p = _impl_.pos_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PosInfo&>(
      ::Protocol::_PosInfo_default_instance_);
}
inline const ::Protocol::PosInfo& PlayerMoveInfo::pos_info() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerMoveInfo.pos_info)
  return _internal_pos_info();
}
inline void PlayerMoveInfo::unsafe_arena_set_allocated_pos_info(
    ::Protocol::PosInfo* pos_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_info_);
  }
  _impl_.pos_info_ = pos_info;
  if (pos_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PlayerMoveInfo.pos_info)
}
inline ::Protocol::PosInfo* PlayerMoveInfo::release_pos_info() {
  
  ::Protocol::PosInfo* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PosInfo* PlayerMoveInfo::unsafe_arena_release_pos_info() {
  // @@protoc_insertion_point(field_release:Protocol.PlayerMoveInfo.pos_info)
  
  ::Protocol::PosInfo* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
  return temp;
}
inline ::Protocol::PosInfo* PlayerMoveInfo::_internal_mutable_pos_info() {
  
  if (_impl_.pos_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PosInfo>(GetArenaForAllocation());
    _impl_.pos_info_ = p;
  }
  return _impl_.pos_info_;
}
inline ::Protocol::PosInfo* PlayerMoveInfo::mutable_pos_info() {
  ::Protocol::PosInfo* _msg = _internal_mutable_pos_info();
  // @@protoc_insertion_point(field_mutable:Protocol.PlayerMoveInfo.pos_info)
  return _msg;
}
inline void PlayerMoveInfo::set_allocated_pos_info(::Protocol::PosInfo* pos_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_info_;
  }
  if (pos_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos_info);
    if (message_arena != submessage_arena) {
      pos_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_info_ = pos_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PlayerMoveInfo.pos_info)
}

// -------------------------------------------------------------------

// PlayerAblity

// uint32 maxhp = 1;
inline void PlayerAblity::clear_maxhp() {
  _impl_.maxhp_ = 0u;
}
inline uint32_t PlayerAblity::_internal_maxhp() const {
  return _impl_.maxhp_;
}
inline uint32_t PlayerAblity::maxhp() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerAblity.maxhp)
  return _internal_maxhp();
}
inline void PlayerAblity::_internal_set_maxhp(uint32_t value) {
  
  _impl_.maxhp_ = value;
}
inline void PlayerAblity::set_maxhp(uint32_t value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerAblity.maxhp)
}

// uint32 hp = 2;
inline void PlayerAblity::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t PlayerAblity::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t PlayerAblity::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerAblity.hp)
  return _internal_hp();
}
inline void PlayerAblity::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void PlayerAblity::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerAblity.hp)
}

// uint32 damage = 3;
inline void PlayerAblity::clear_damage() {
  _impl_.damage_ = 0u;
}
inline uint32_t PlayerAblity::_internal_damage() const {
  return _impl_.damage_;
}
inline uint32_t PlayerAblity::damage() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerAblity.damage)
  return _internal_damage();
}
inline void PlayerAblity::_internal_set_damage(uint32_t value) {
  
  _impl_.damage_ = value;
}
inline void PlayerAblity::set_damage(uint32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerAblity.damage)
}

// float signaturegage = 4;
inline void PlayerAblity::clear_signaturegage() {
  _impl_.signaturegage_ = 0;
}
inline float PlayerAblity::_internal_signaturegage() const {
  return _impl_.signaturegage_;
}
inline float PlayerAblity::signaturegage() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerAblity.signaturegage)
  return _internal_signaturegage();
}
inline void PlayerAblity::_internal_set_signaturegage(float value) {
  
  _impl_.signaturegage_ = value;
}
inline void PlayerAblity::set_signaturegage(float value) {
  _internal_set_signaturegage(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerAblity.signaturegage)
}

// float maxsignaturegage = 5;
inline void PlayerAblity::clear_maxsignaturegage() {
  _impl_.maxsignaturegage_ = 0;
}
inline float PlayerAblity::_internal_maxsignaturegage() const {
  return _impl_.maxsignaturegage_;
}
inline float PlayerAblity::maxsignaturegage() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerAblity.maxsignaturegage)
  return _internal_maxsignaturegage();
}
inline void PlayerAblity::_internal_set_maxsignaturegage(float value) {
  
  _impl_.maxsignaturegage_ = value;
}
inline void PlayerAblity::set_maxsignaturegage(float value) {
  _internal_set_maxsignaturegage(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerAblity.maxsignaturegage)
}

// uint32 gold = 6;
inline void PlayerAblity::clear_gold() {
  _impl_.gold_ = 0u;
}
inline uint32_t PlayerAblity::_internal_gold() const {
  return _impl_.gold_;
}
inline uint32_t PlayerAblity::gold() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerAblity.gold)
  return _internal_gold();
}
inline void PlayerAblity::_internal_set_gold(uint32_t value) {
  
  _impl_.gold_ = value;
}
inline void PlayerAblity::set_gold(uint32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerAblity.gold)
}

// -------------------------------------------------------------------

// PlayerUpdateInfo

// uint32 player_id = 1;
inline void PlayerUpdateInfo::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t PlayerUpdateInfo::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t PlayerUpdateInfo::player_id() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerUpdateInfo.player_id)
  return _internal_player_id();
}
inline void PlayerUpdateInfo::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void PlayerUpdateInfo::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerUpdateInfo.player_id)
}

// .Protocol.PosInfo pos_info = 2;
inline bool PlayerUpdateInfo::_internal_has_pos_info() const {
  return this != internal_default_instance() && _impl_.pos_info_ != nullptr;
}
inline bool PlayerUpdateInfo::has_pos_info() const {
  return _internal_has_pos_info();
}
inline void PlayerUpdateInfo::clear_pos_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_info_ != nullptr) {
    delete _impl_.pos_info_;
  }
  _impl_.pos_info_ = nullptr;
}
inline const ::Protocol::PosInfo& PlayerUpdateInfo::_internal_pos_info() const {
  const ::Protocol::PosInfo* p = _impl_.pos_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PosInfo&>(
      ::Protocol::_PosInfo_default_instance_);
}
inline const ::Protocol::PosInfo& PlayerUpdateInfo::pos_info() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerUpdateInfo.pos_info)
  return _internal_pos_info();
}
inline void PlayerUpdateInfo::unsafe_arena_set_allocated_pos_info(
    ::Protocol::PosInfo* pos_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_info_);
  }
  _impl_.pos_info_ = pos_info;
  if (pos_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PlayerUpdateInfo.pos_info)
}
inline ::Protocol::PosInfo* PlayerUpdateInfo::release_pos_info() {
  
  ::Protocol::PosInfo* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PosInfo* PlayerUpdateInfo::unsafe_arena_release_pos_info() {
  // @@protoc_insertion_point(field_release:Protocol.PlayerUpdateInfo.pos_info)
  
  ::Protocol::PosInfo* temp = _impl_.pos_info_;
  _impl_.pos_info_ = nullptr;
  return temp;
}
inline ::Protocol::PosInfo* PlayerUpdateInfo::_internal_mutable_pos_info() {
  
  if (_impl_.pos_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PosInfo>(GetArenaForAllocation());
    _impl_.pos_info_ = p;
  }
  return _impl_.pos_info_;
}
inline ::Protocol::PosInfo* PlayerUpdateInfo::mutable_pos_info() {
  ::Protocol::PosInfo* _msg = _internal_mutable_pos_info();
  // @@protoc_insertion_point(field_mutable:Protocol.PlayerUpdateInfo.pos_info)
  return _msg;
}
inline void PlayerUpdateInfo::set_allocated_pos_info(::Protocol::PosInfo* pos_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_info_;
  }
  if (pos_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos_info);
    if (message_arena != submessage_arena) {
      pos_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_info_ = pos_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PlayerUpdateInfo.pos_info)
}

// .Protocol.PlayerAblity player_ablity = 3;
inline bool PlayerUpdateInfo::_internal_has_player_ablity() const {
  return this != internal_default_instance() && _impl_.player_ablity_ != nullptr;
}
inline bool PlayerUpdateInfo::has_player_ablity() const {
  return _internal_has_player_ablity();
}
inline void PlayerUpdateInfo::clear_player_ablity() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ablity_ != nullptr) {
    delete _impl_.player_ablity_;
  }
  _impl_.player_ablity_ = nullptr;
}
inline const ::Protocol::PlayerAblity& PlayerUpdateInfo::_internal_player_ablity() const {
  const ::Protocol::PlayerAblity* p = _impl_.player_ablity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerAblity&>(
      ::Protocol::_PlayerAblity_default_instance_);
}
inline const ::Protocol::PlayerAblity& PlayerUpdateInfo::player_ablity() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerUpdateInfo.player_ablity)
  return _internal_player_ablity();
}
inline void PlayerUpdateInfo::unsafe_arena_set_allocated_player_ablity(
    ::Protocol::PlayerAblity* player_ablity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_ablity_);
  }
  _impl_.player_ablity_ = player_ablity;
  if (player_ablity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PlayerUpdateInfo.player_ablity)
}
inline ::Protocol::PlayerAblity* PlayerUpdateInfo::release_player_ablity() {
  
  ::Protocol::PlayerAblity* temp = _impl_.player_ablity_;
  _impl_.player_ablity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PlayerAblity* PlayerUpdateInfo::unsafe_arena_release_player_ablity() {
  // @@protoc_insertion_point(field_release:Protocol.PlayerUpdateInfo.player_ablity)
  
  ::Protocol::PlayerAblity* temp = _impl_.player_ablity_;
  _impl_.player_ablity_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerAblity* PlayerUpdateInfo::_internal_mutable_player_ablity() {
  
  if (_impl_.player_ablity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerAblity>(GetArenaForAllocation());
    _impl_.player_ablity_ = p;
  }
  return _impl_.player_ablity_;
}
inline ::Protocol::PlayerAblity* PlayerUpdateInfo::mutable_player_ablity() {
  ::Protocol::PlayerAblity* _msg = _internal_mutable_player_ablity();
  // @@protoc_insertion_point(field_mutable:Protocol.PlayerUpdateInfo.player_ablity)
  return _msg;
}
inline void PlayerUpdateInfo::set_allocated_player_ablity(::Protocol::PlayerAblity* player_ablity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_ablity_;
  }
  if (player_ablity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_ablity);
    if (message_arena != submessage_arena) {
      player_ablity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_ablity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ablity_ = player_ablity;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PlayerUpdateInfo.player_ablity)
}

// -------------------------------------------------------------------

// MonsterAblity

// uint32 maxhp = 1;
inline void MonsterAblity::clear_maxhp() {
  _impl_.maxhp_ = 0u;
}
inline uint32_t MonsterAblity::_internal_maxhp() const {
  return _impl_.maxhp_;
}
inline uint32_t MonsterAblity::maxhp() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterAblity.maxhp)
  return _internal_maxhp();
}
inline void MonsterAblity::_internal_set_maxhp(uint32_t value) {
  
  _impl_.maxhp_ = value;
}
inline void MonsterAblity::set_maxhp(uint32_t value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:Protocol.MonsterAblity.maxhp)
}

// uint32 hp = 2;
inline void MonsterAblity::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t MonsterAblity::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t MonsterAblity::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterAblity.hp)
  return _internal_hp();
}
inline void MonsterAblity::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void MonsterAblity::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.MonsterAblity.hp)
}

// -------------------------------------------------------------------

// ProjectileBasicInfo

// uint64 new_projectile_id = 1;
inline void ProjectileBasicInfo::clear_new_projectile_id() {
  _impl_.new_projectile_id_ = uint64_t{0u};
}
inline uint64_t ProjectileBasicInfo::_internal_new_projectile_id() const {
  return _impl_.new_projectile_id_;
}
inline uint64_t ProjectileBasicInfo::new_projectile_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileBasicInfo.new_projectile_id)
  return _internal_new_projectile_id();
}
inline void ProjectileBasicInfo::_internal_set_new_projectile_id(uint64_t value) {
  
  _impl_.new_projectile_id_ = value;
}
inline void ProjectileBasicInfo::set_new_projectile_id(uint64_t value) {
  _internal_set_new_projectile_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileBasicInfo.new_projectile_id)
}

// uint32 player_id = 2;
inline void ProjectileBasicInfo::clear_player_id() {
  _impl_.player_id_ = 0u;
}
inline uint32_t ProjectileBasicInfo::_internal_player_id() const {
  return _impl_.player_id_;
}
inline uint32_t ProjectileBasicInfo::player_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileBasicInfo.player_id)
  return _internal_player_id();
}
inline void ProjectileBasicInfo::_internal_set_player_id(uint32_t value) {
  
  _impl_.player_id_ = value;
}
inline void ProjectileBasicInfo::set_player_id(uint32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileBasicInfo.player_id)
}

// float duration = 3;
inline void ProjectileBasicInfo::clear_duration() {
  _impl_.duration_ = 0;
}
inline float ProjectileBasicInfo::_internal_duration() const {
  return _impl_.duration_;
}
inline float ProjectileBasicInfo::duration() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileBasicInfo.duration)
  return _internal_duration();
}
inline void ProjectileBasicInfo::_internal_set_duration(float value) {
  
  _impl_.duration_ = value;
}
inline void ProjectileBasicInfo::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileBasicInfo.duration)
}

// float speed = 4;
inline void ProjectileBasicInfo::clear_speed() {
  _impl_.speed_ = 0;
}
inline float ProjectileBasicInfo::_internal_speed() const {
  return _impl_.speed_;
}
inline float ProjectileBasicInfo::speed() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileBasicInfo.speed)
  return _internal_speed();
}
inline void ProjectileBasicInfo::_internal_set_speed(float value) {
  
  _impl_.speed_ = value;
}
inline void ProjectileBasicInfo::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileBasicInfo.speed)
}

// uint32 damage = 5;
inline void ProjectileBasicInfo::clear_damage() {
  _impl_.damage_ = 0u;
}
inline uint32_t ProjectileBasicInfo::_internal_damage() const {
  return _impl_.damage_;
}
inline uint32_t ProjectileBasicInfo::damage() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileBasicInfo.damage)
  return _internal_damage();
}
inline void ProjectileBasicInfo::_internal_set_damage(uint32_t value) {
  
  _impl_.damage_ = value;
}
inline void ProjectileBasicInfo::set_damage(uint32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileBasicInfo.damage)
}

// .Protocol.Vector3 dir = 6;
inline bool ProjectileBasicInfo::_internal_has_dir() const {
  return this != internal_default_instance() && _impl_.dir_ != nullptr;
}
inline bool ProjectileBasicInfo::has_dir() const {
  return _internal_has_dir();
}
inline void ProjectileBasicInfo::clear_dir() {
  if (GetArenaForAllocation() == nullptr && _impl_.dir_ != nullptr) {
    delete _impl_.dir_;
  }
  _impl_.dir_ = nullptr;
}
inline const ::Protocol::Vector3& ProjectileBasicInfo::_internal_dir() const {
  const ::Protocol::Vector3* p = _impl_.dir_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& ProjectileBasicInfo::dir() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileBasicInfo.dir)
  return _internal_dir();
}
inline void ProjectileBasicInfo::unsafe_arena_set_allocated_dir(
    ::Protocol::Vector3* dir) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dir_);
  }
  _impl_.dir_ = dir;
  if (dir) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ProjectileBasicInfo.dir)
}
inline ::Protocol::Vector3* ProjectileBasicInfo::release_dir() {
  
  ::Protocol::Vector3* temp = _impl_.dir_;
  _impl_.dir_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* ProjectileBasicInfo::unsafe_arena_release_dir() {
  // @@protoc_insertion_point(field_release:Protocol.ProjectileBasicInfo.dir)
  
  ::Protocol::Vector3* temp = _impl_.dir_;
  _impl_.dir_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* ProjectileBasicInfo::_internal_mutable_dir() {
  
  if (_impl_.dir_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.dir_ = p;
  }
  return _impl_.dir_;
}
inline ::Protocol::Vector3* ProjectileBasicInfo::mutable_dir() {
  ::Protocol::Vector3* _msg = _internal_mutable_dir();
  // @@protoc_insertion_point(field_mutable:Protocol.ProjectileBasicInfo.dir)
  return _msg;
}
inline void ProjectileBasicInfo::set_allocated_dir(::Protocol::Vector3* dir) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dir_;
  }
  if (dir) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dir);
    if (message_arena != submessage_arena) {
      dir = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dir, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dir_ = dir;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ProjectileBasicInfo.dir)
}

// .Protocol.Vector3 size = 7;
inline bool ProjectileBasicInfo::_internal_has_size() const {
  return this != internal_default_instance() && _impl_.size_ != nullptr;
}
inline bool ProjectileBasicInfo::has_size() const {
  return _internal_has_size();
}
inline void ProjectileBasicInfo::clear_size() {
  if (GetArenaForAllocation() == nullptr && _impl_.size_ != nullptr) {
    delete _impl_.size_;
  }
  _impl_.size_ = nullptr;
}
inline const ::Protocol::Vector3& ProjectileBasicInfo::_internal_size() const {
  const ::Protocol::Vector3* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& ProjectileBasicInfo::size() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileBasicInfo.size)
  return _internal_size();
}
inline void ProjectileBasicInfo::unsafe_arena_set_allocated_size(
    ::Protocol::Vector3* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ProjectileBasicInfo.size)
}
inline ::Protocol::Vector3* ProjectileBasicInfo::release_size() {
  
  ::Protocol::Vector3* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* ProjectileBasicInfo::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:Protocol.ProjectileBasicInfo.size)
  
  ::Protocol::Vector3* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* ProjectileBasicInfo::_internal_mutable_size() {
  
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::Protocol::Vector3* ProjectileBasicInfo::mutable_size() {
  ::Protocol::Vector3* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:Protocol.ProjectileBasicInfo.size)
  return _msg;
}
inline void ProjectileBasicInfo::set_allocated_size(::Protocol::Vector3* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(size);
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ProjectileBasicInfo.size)
}

// .Protocol.Vector3 spawn_pos = 8;
inline bool ProjectileBasicInfo::_internal_has_spawn_pos() const {
  return this != internal_default_instance() && _impl_.spawn_pos_ != nullptr;
}
inline bool ProjectileBasicInfo::has_spawn_pos() const {
  return _internal_has_spawn_pos();
}
inline void ProjectileBasicInfo::clear_spawn_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.spawn_pos_ != nullptr) {
    delete _impl_.spawn_pos_;
  }
  _impl_.spawn_pos_ = nullptr;
}
inline const ::Protocol::Vector3& ProjectileBasicInfo::_internal_spawn_pos() const {
  const ::Protocol::Vector3* p = _impl_.spawn_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& ProjectileBasicInfo::spawn_pos() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileBasicInfo.spawn_pos)
  return _internal_spawn_pos();
}
inline void ProjectileBasicInfo::unsafe_arena_set_allocated_spawn_pos(
    ::Protocol::Vector3* spawn_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spawn_pos_);
  }
  _impl_.spawn_pos_ = spawn_pos;
  if (spawn_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ProjectileBasicInfo.spawn_pos)
}
inline ::Protocol::Vector3* ProjectileBasicInfo::release_spawn_pos() {
  
  ::Protocol::Vector3* temp = _impl_.spawn_pos_;
  _impl_.spawn_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* ProjectileBasicInfo::unsafe_arena_release_spawn_pos() {
  // @@protoc_insertion_point(field_release:Protocol.ProjectileBasicInfo.spawn_pos)
  
  ::Protocol::Vector3* temp = _impl_.spawn_pos_;
  _impl_.spawn_pos_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* ProjectileBasicInfo::_internal_mutable_spawn_pos() {
  
  if (_impl_.spawn_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.spawn_pos_ = p;
  }
  return _impl_.spawn_pos_;
}
inline ::Protocol::Vector3* ProjectileBasicInfo::mutable_spawn_pos() {
  ::Protocol::Vector3* _msg = _internal_mutable_spawn_pos();
  // @@protoc_insertion_point(field_mutable:Protocol.ProjectileBasicInfo.spawn_pos)
  return _msg;
}
inline void ProjectileBasicInfo::set_allocated_spawn_pos(::Protocol::Vector3* spawn_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spawn_pos_;
  }
  if (spawn_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spawn_pos);
    if (message_arena != submessage_arena) {
      spawn_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spawn_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spawn_pos_ = spawn_pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ProjectileBasicInfo.spawn_pos)
}

// bool bCollisionExplosion = 9;
inline void ProjectileBasicInfo::clear_bcollisionexplosion() {
  _impl_.bcollisionexplosion_ = false;
}
inline bool ProjectileBasicInfo::_internal_bcollisionexplosion() const {
  return _impl_.bcollisionexplosion_;
}
inline bool ProjectileBasicInfo::bcollisionexplosion() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileBasicInfo.bCollisionExplosion)
  return _internal_bcollisionexplosion();
}
inline void ProjectileBasicInfo::_internal_set_bcollisionexplosion(bool value) {
  
  _impl_.bcollisionexplosion_ = value;
}
inline void ProjectileBasicInfo::set_bcollisionexplosion(bool value) {
  _internal_set_bcollisionexplosion(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileBasicInfo.bCollisionExplosion)
}

// -------------------------------------------------------------------

// ProjectileInfo

// uint64 Projectile_id = 1;
inline void ProjectileInfo::clear_projectile_id() {
  _impl_.projectile_id_ = uint64_t{0u};
}
inline uint64_t ProjectileInfo::_internal_projectile_id() const {
  return _impl_.projectile_id_;
}
inline uint64_t ProjectileInfo::projectile_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileInfo.Projectile_id)
  return _internal_projectile_id();
}
inline void ProjectileInfo::_internal_set_projectile_id(uint64_t value) {
  
  _impl_.projectile_id_ = value;
}
inline void ProjectileInfo::set_projectile_id(uint64_t value) {
  _internal_set_projectile_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileInfo.Projectile_id)
}

// .Protocol.ProjectileState state = 2;
inline void ProjectileInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::ProjectileState ProjectileInfo::_internal_state() const {
  return static_cast< ::Protocol::ProjectileState >(_impl_.state_);
}
inline ::Protocol::ProjectileState ProjectileInfo::state() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileInfo.state)
  return _internal_state();
}
inline void ProjectileInfo::_internal_set_state(::Protocol::ProjectileState value) {
  
  _impl_.state_ = value;
}
inline void ProjectileInfo::set_state(::Protocol::ProjectileState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileInfo.state)
}

// .Protocol.ObjectInfo object_info = 3;
inline bool ProjectileInfo::_internal_has_object_info() const {
  return this != internal_default_instance() && _impl_.object_info_ != nullptr;
}
inline bool ProjectileInfo::has_object_info() const {
  return _internal_has_object_info();
}
inline void ProjectileInfo::clear_object_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.object_info_ != nullptr) {
    delete _impl_.object_info_;
  }
  _impl_.object_info_ = nullptr;
}
inline const ::Protocol::ObjectInfo& ProjectileInfo::_internal_object_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.object_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& ProjectileInfo::object_info() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileInfo.object_info)
  return _internal_object_info();
}
inline void ProjectileInfo::unsafe_arena_set_allocated_object_info(
    ::Protocol::ObjectInfo* object_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_info_);
  }
  _impl_.object_info_ = object_info;
  if (object_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ProjectileInfo.object_info)
}
inline ::Protocol::ObjectInfo* ProjectileInfo::release_object_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.object_info_;
  _impl_.object_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* ProjectileInfo::unsafe_arena_release_object_info() {
  // @@protoc_insertion_point(field_release:Protocol.ProjectileInfo.object_info)
  
  ::Protocol::ObjectInfo* temp = _impl_.object_info_;
  _impl_.object_info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* ProjectileInfo::_internal_mutable_object_info() {
  
  if (_impl_.object_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.object_info_ = p;
  }
  return _impl_.object_info_;
}
inline ::Protocol::ObjectInfo* ProjectileInfo::mutable_object_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_object_info();
  // @@protoc_insertion_point(field_mutable:Protocol.ProjectileInfo.object_info)
  return _msg;
}
inline void ProjectileInfo::set_allocated_object_info(::Protocol::ObjectInfo* object_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_info_;
  }
  if (object_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object_info);
    if (message_arena != submessage_arena) {
      object_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.object_info_ = object_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ProjectileInfo.object_info)
}

// -------------------------------------------------------------------

// NpcInfo

// uint32 object_id = 1;
inline void NpcInfo::clear_object_id() {
  _impl_.object_id_ = 0u;
}
inline uint32_t NpcInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint32_t NpcInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.NpcInfo.object_id)
  return _internal_object_id();
}
inline void NpcInfo::_internal_set_object_id(uint32_t value) {
  
  _impl_.object_id_ = value;
}
inline void NpcInfo::set_object_id(uint32_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.NpcInfo.object_id)
}

// .Protocol.ObjectInfo object_info = 2;
inline bool NpcInfo::_internal_has_object_info() const {
  return this != internal_default_instance() && _impl_.object_info_ != nullptr;
}
inline bool NpcInfo::has_object_info() const {
  return _internal_has_object_info();
}
inline void NpcInfo::clear_object_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.object_info_ != nullptr) {
    delete _impl_.object_info_;
  }
  _impl_.object_info_ = nullptr;
}
inline const ::Protocol::ObjectInfo& NpcInfo::_internal_object_info() const {
  const ::Protocol::ObjectInfo* p = _impl_.object_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& NpcInfo::object_info() const {
  // @@protoc_insertion_point(field_get:Protocol.NpcInfo.object_info)
  return _internal_object_info();
}
inline void NpcInfo::unsafe_arena_set_allocated_object_info(
    ::Protocol::ObjectInfo* object_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_info_);
  }
  _impl_.object_info_ = object_info;
  if (object_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.NpcInfo.object_info)
}
inline ::Protocol::ObjectInfo* NpcInfo::release_object_info() {
  
  ::Protocol::ObjectInfo* temp = _impl_.object_info_;
  _impl_.object_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* NpcInfo::unsafe_arena_release_object_info() {
  // @@protoc_insertion_point(field_release:Protocol.NpcInfo.object_info)
  
  ::Protocol::ObjectInfo* temp = _impl_.object_info_;
  _impl_.object_info_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* NpcInfo::_internal_mutable_object_info() {
  
  if (_impl_.object_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.object_info_ = p;
  }
  return _impl_.object_info_;
}
inline ::Protocol::ObjectInfo* NpcInfo::mutable_object_info() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_object_info();
  // @@protoc_insertion_point(field_mutable:Protocol.NpcInfo.object_info)
  return _msg;
}
inline void NpcInfo::set_allocated_object_info(::Protocol::ObjectInfo* object_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_info_;
  }
  if (object_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object_info);
    if (message_arena != submessage_arena) {
      object_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.object_info_ = object_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.NpcInfo.object_info)
}

// repeated uint32 item_id = 3;
inline int NpcInfo::_internal_item_id_size() const {
  return _impl_.item_id_.size();
}
inline int NpcInfo::item_id_size() const {
  return _internal_item_id_size();
}
inline void NpcInfo::clear_item_id() {
  _impl_.item_id_.Clear();
}
inline uint32_t NpcInfo::_internal_item_id(int index) const {
  return _impl_.item_id_.Get(index);
}
inline uint32_t NpcInfo::item_id(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.NpcInfo.item_id)
  return _internal_item_id(index);
}
inline void NpcInfo::set_item_id(int index, uint32_t value) {
  _impl_.item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.NpcInfo.item_id)
}
inline void NpcInfo::_internal_add_item_id(uint32_t value) {
  _impl_.item_id_.Add(value);
}
inline void NpcInfo::add_item_id(uint32_t value) {
  _internal_add_item_id(value);
  // @@protoc_insertion_point(field_add:Protocol.NpcInfo.item_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NpcInfo::_internal_item_id() const {
  return _impl_.item_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NpcInfo::item_id() const {
  // @@protoc_insertion_point(field_list:Protocol.NpcInfo.item_id)
  return _internal_item_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NpcInfo::_internal_mutable_item_id() {
  return &_impl_.item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NpcInfo::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.NpcInfo.item_id)
  return _internal_mutable_item_id();
}

// repeated uint32 skill_id = 4;
inline int NpcInfo::_internal_skill_id_size() const {
  return _impl_.skill_id_.size();
}
inline int NpcInfo::skill_id_size() const {
  return _internal_skill_id_size();
}
inline void NpcInfo::clear_skill_id() {
  _impl_.skill_id_.Clear();
}
inline uint32_t NpcInfo::_internal_skill_id(int index) const {
  return _impl_.skill_id_.Get(index);
}
inline uint32_t NpcInfo::skill_id(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.NpcInfo.skill_id)
  return _internal_skill_id(index);
}
inline void NpcInfo::set_skill_id(int index, uint32_t value) {
  _impl_.skill_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.NpcInfo.skill_id)
}
inline void NpcInfo::_internal_add_skill_id(uint32_t value) {
  _impl_.skill_id_.Add(value);
}
inline void NpcInfo::add_skill_id(uint32_t value) {
  _internal_add_skill_id(value);
  // @@protoc_insertion_point(field_add:Protocol.NpcInfo.skill_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NpcInfo::_internal_skill_id() const {
  return _impl_.skill_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NpcInfo::skill_id() const {
  // @@protoc_insertion_point(field_list:Protocol.NpcInfo.skill_id)
  return _internal_skill_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NpcInfo::_internal_mutable_skill_id() {
  return &_impl_.skill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NpcInfo::mutable_skill_id() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.NpcInfo.skill_id)
  return _internal_mutable_skill_id();
}

// -------------------------------------------------------------------

// ItemInfo

// uint32 item_id = 1;
inline void ItemInfo::clear_item_id() {
  _impl_.item_id_ = 0u;
}
inline uint32_t ItemInfo::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint32_t ItemInfo::item_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.item_id)
  return _internal_item_id();
}
inline void ItemInfo::_internal_set_item_id(uint32_t value) {
  
  _impl_.item_id_ = value;
}
inline void ItemInfo::set_item_id(uint32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.item_id)
}

// bool is_sell = 2;
inline void ItemInfo::clear_is_sell() {
  _impl_.is_sell_ = false;
}
inline bool ItemInfo::_internal_is_sell() const {
  return _impl_.is_sell_;
}
inline bool ItemInfo::is_sell() const {
  // @@protoc_insertion_point(field_get:Protocol.ItemInfo.is_sell)
  return _internal_is_sell();
}
inline void ItemInfo::_internal_set_is_sell(bool value) {
  
  _impl_.is_sell_ = value;
}
inline void ItemInfo::set_is_sell(bool value) {
  _internal_set_is_sell(value);
  // @@protoc_insertion_point(field_set:Protocol.ItemInfo.is_sell)
}

// -------------------------------------------------------------------

// SkillInfo

// uint32 skill_id = 1;
inline void SkillInfo::clear_skill_id() {
  _impl_.skill_id_ = 0u;
}
inline uint32_t SkillInfo::_internal_skill_id() const {
  return _impl_.skill_id_;
}
inline uint32_t SkillInfo::skill_id() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.skill_id)
  return _internal_skill_id();
}
inline void SkillInfo::_internal_set_skill_id(uint32_t value) {
  
  _impl_.skill_id_ = value;
}
inline void SkillInfo::set_skill_id(uint32_t value) {
  _internal_set_skill_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.skill_id)
}

// bool is_sell = 2;
inline void SkillInfo::clear_is_sell() {
  _impl_.is_sell_ = false;
}
inline bool SkillInfo::_internal_is_sell() const {
  return _impl_.is_sell_;
}
inline bool SkillInfo::is_sell() const {
  // @@protoc_insertion_point(field_get:Protocol.SkillInfo.is_sell)
  return _internal_is_sell();
}
inline void SkillInfo::_internal_set_is_sell(bool value) {
  
  _impl_.is_sell_ = value;
}
inline void SkillInfo::set_is_sell(bool value) {
  _internal_set_is_sell(value);
  // @@protoc_insertion_point(field_set:Protocol.SkillInfo.is_sell)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
