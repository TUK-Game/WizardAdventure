// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_BUY_ITEM;
struct C_BUY_ITEMDefaultTypeInternal;
extern C_BUY_ITEMDefaultTypeInternal _C_BUY_ITEM_default_instance_;
class C_ENTER_GAME;
struct C_ENTER_GAMEDefaultTypeInternal;
extern C_ENTER_GAMEDefaultTypeInternal _C_ENTER_GAME_default_instance_;
class C_ENTER_GAME_SUCCESS;
struct C_ENTER_GAME_SUCCESSDefaultTypeInternal;
extern C_ENTER_GAME_SUCCESSDefaultTypeInternal _C_ENTER_GAME_SUCCESS_default_instance_;
class C_LEAVE_GAME;
struct C_LEAVE_GAMEDefaultTypeInternal;
extern C_LEAVE_GAMEDefaultTypeInternal _C_LEAVE_GAME_default_instance_;
class C_LOGIN;
struct C_LOGINDefaultTypeInternal;
extern C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
class C_MOVE;
struct C_MOVEDefaultTypeInternal;
extern C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
class C_MOVE_PROJECTILE;
struct C_MOVE_PROJECTILEDefaultTypeInternal;
extern C_MOVE_PROJECTILEDefaultTypeInternal _C_MOVE_PROJECTILE_default_instance_;
class C_SPAWN_PROJECTILE;
struct C_SPAWN_PROJECTILEDefaultTypeInternal;
extern C_SPAWN_PROJECTILEDefaultTypeInternal _C_SPAWN_PROJECTILE_default_instance_;
class S_BUY_ITEM;
struct S_BUY_ITEMDefaultTypeInternal;
extern S_BUY_ITEMDefaultTypeInternal _S_BUY_ITEM_default_instance_;
class S_DESPAWN;
struct S_DESPAWNDefaultTypeInternal;
extern S_DESPAWNDefaultTypeInternal _S_DESPAWN_default_instance_;
class S_DESPAWN_PLAYER;
struct S_DESPAWN_PLAYERDefaultTypeInternal;
extern S_DESPAWN_PLAYERDefaultTypeInternal _S_DESPAWN_PLAYER_default_instance_;
class S_ENTER_GAME;
struct S_ENTER_GAMEDefaultTypeInternal;
extern S_ENTER_GAMEDefaultTypeInternal _S_ENTER_GAME_default_instance_;
class S_GATE_CLOSE;
struct S_GATE_CLOSEDefaultTypeInternal;
extern S_GATE_CLOSEDefaultTypeInternal _S_GATE_CLOSE_default_instance_;
class S_GATE_OPNE;
struct S_GATE_OPNEDefaultTypeInternal;
extern S_GATE_OPNEDefaultTypeInternal _S_GATE_OPNE_default_instance_;
class S_LEAVE_GAME;
struct S_LEAVE_GAMEDefaultTypeInternal;
extern S_LEAVE_GAMEDefaultTypeInternal _S_LEAVE_GAME_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_MONSTER_INFO;
struct S_MONSTER_INFODefaultTypeInternal;
extern S_MONSTER_INFODefaultTypeInternal _S_MONSTER_INFO_default_instance_;
class S_MOVE;
struct S_MOVEDefaultTypeInternal;
extern S_MOVEDefaultTypeInternal _S_MOVE_default_instance_;
class S_PROJECTILE_INFO;
struct S_PROJECTILE_INFODefaultTypeInternal;
extern S_PROJECTILE_INFODefaultTypeInternal _S_PROJECTILE_INFO_default_instance_;
class S_SPAWN;
struct S_SPAWNDefaultTypeInternal;
extern S_SPAWNDefaultTypeInternal _S_SPAWN_default_instance_;
class S_SPAWN_EXISTING_PLAYER;
struct S_SPAWN_EXISTING_PLAYERDefaultTypeInternal;
extern S_SPAWN_EXISTING_PLAYERDefaultTypeInternal _S_SPAWN_EXISTING_PLAYER_default_instance_;
class S_SPAWN_NEW_PLAYER;
struct S_SPAWN_NEW_PLAYERDefaultTypeInternal;
extern S_SPAWN_NEW_PLAYERDefaultTypeInternal _S_SPAWN_NEW_PLAYER_default_instance_;
class S_SPAWN_NPC;
struct S_SPAWN_NPCDefaultTypeInternal;
extern S_SPAWN_NPCDefaultTypeInternal _S_SPAWN_NPC_default_instance_;
class S_SPAWN_PROJECTILE_SUCESSE;
struct S_SPAWN_PROJECTILE_SUCESSEDefaultTypeInternal;
extern S_SPAWN_PROJECTILE_SUCESSEDefaultTypeInternal _S_SPAWN_PROJECTILE_SUCESSE_default_instance_;
class S_UPDATE_ITEM;
struct S_UPDATE_ITEMDefaultTypeInternal;
extern S_UPDATE_ITEMDefaultTypeInternal _S_UPDATE_ITEM_default_instance_;
class S_UPDATE_PLAYER;
struct S_UPDATE_PLAYERDefaultTypeInternal;
extern S_UPDATE_PLAYERDefaultTypeInternal _S_UPDATE_PLAYER_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_BUY_ITEM* Arena::CreateMaybeMessage<::Protocol::C_BUY_ITEM>(Arena*);
template<> ::Protocol::C_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::C_ENTER_GAME>(Arena*);
template<> ::Protocol::C_ENTER_GAME_SUCCESS* Arena::CreateMaybeMessage<::Protocol::C_ENTER_GAME_SUCCESS>(Arena*);
template<> ::Protocol::C_LEAVE_GAME* Arena::CreateMaybeMessage<::Protocol::C_LEAVE_GAME>(Arena*);
template<> ::Protocol::C_LOGIN* Arena::CreateMaybeMessage<::Protocol::C_LOGIN>(Arena*);
template<> ::Protocol::C_MOVE* Arena::CreateMaybeMessage<::Protocol::C_MOVE>(Arena*);
template<> ::Protocol::C_MOVE_PROJECTILE* Arena::CreateMaybeMessage<::Protocol::C_MOVE_PROJECTILE>(Arena*);
template<> ::Protocol::C_SPAWN_PROJECTILE* Arena::CreateMaybeMessage<::Protocol::C_SPAWN_PROJECTILE>(Arena*);
template<> ::Protocol::S_BUY_ITEM* Arena::CreateMaybeMessage<::Protocol::S_BUY_ITEM>(Arena*);
template<> ::Protocol::S_DESPAWN* Arena::CreateMaybeMessage<::Protocol::S_DESPAWN>(Arena*);
template<> ::Protocol::S_DESPAWN_PLAYER* Arena::CreateMaybeMessage<::Protocol::S_DESPAWN_PLAYER>(Arena*);
template<> ::Protocol::S_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::S_ENTER_GAME>(Arena*);
template<> ::Protocol::S_GATE_CLOSE* Arena::CreateMaybeMessage<::Protocol::S_GATE_CLOSE>(Arena*);
template<> ::Protocol::S_GATE_OPNE* Arena::CreateMaybeMessage<::Protocol::S_GATE_OPNE>(Arena*);
template<> ::Protocol::S_LEAVE_GAME* Arena::CreateMaybeMessage<::Protocol::S_LEAVE_GAME>(Arena*);
template<> ::Protocol::S_LOGIN* Arena::CreateMaybeMessage<::Protocol::S_LOGIN>(Arena*);
template<> ::Protocol::S_MONSTER_INFO* Arena::CreateMaybeMessage<::Protocol::S_MONSTER_INFO>(Arena*);
template<> ::Protocol::S_MOVE* Arena::CreateMaybeMessage<::Protocol::S_MOVE>(Arena*);
template<> ::Protocol::S_PROJECTILE_INFO* Arena::CreateMaybeMessage<::Protocol::S_PROJECTILE_INFO>(Arena*);
template<> ::Protocol::S_SPAWN* Arena::CreateMaybeMessage<::Protocol::S_SPAWN>(Arena*);
template<> ::Protocol::S_SPAWN_EXISTING_PLAYER* Arena::CreateMaybeMessage<::Protocol::S_SPAWN_EXISTING_PLAYER>(Arena*);
template<> ::Protocol::S_SPAWN_NEW_PLAYER* Arena::CreateMaybeMessage<::Protocol::S_SPAWN_NEW_PLAYER>(Arena*);
template<> ::Protocol::S_SPAWN_NPC* Arena::CreateMaybeMessage<::Protocol::S_SPAWN_NPC>(Arena*);
template<> ::Protocol::S_SPAWN_PROJECTILE_SUCESSE* Arena::CreateMaybeMessage<::Protocol::S_SPAWN_PROJECTILE_SUCESSE>(Arena*);
template<> ::Protocol::S_UPDATE_ITEM* Arena::CreateMaybeMessage<::Protocol::S_UPDATE_ITEM>(Arena*);
template<> ::Protocol::S_UPDATE_PLAYER* Arena::CreateMaybeMessage<::Protocol::S_UPDATE_PLAYER>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_LOGIN) */ {
 public:
  inline C_LOGIN() : C_LOGIN(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOGIN(const C_LOGIN& from);
  C_LOGIN(C_LOGIN&& from) noexcept
    : C_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_LOGIN& operator=(const C_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGIN& operator=(C_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_LOGIN*>(
               &_C_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_LOGIN& a, C_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_LOGIN& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_LOGIN& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOGIN";
  }
  protected:
  explicit C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN(const S_LOGIN& from);
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LOGIN& from) {
    S_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ENTER_GAME) */ {
 public:
  inline C_ENTER_GAME() : C_ENTER_GAME(nullptr) {}
  ~C_ENTER_GAME() override;
  explicit PROTOBUF_CONSTEXPR C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ENTER_GAME(const C_ENTER_GAME& from);
  C_ENTER_GAME(C_ENTER_GAME&& from) noexcept
    : C_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline C_ENTER_GAME& operator=(const C_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ENTER_GAME& operator=(C_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const C_ENTER_GAME*>(
               &_C_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_ENTER_GAME& a, C_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ENTER_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ENTER_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ENTER_GAME& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ENTER_GAME& from) {
    C_ENTER_GAME::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ENTER_GAME* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ENTER_GAME";
  }
  protected:
  explicit C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerTypeFieldNumber = 1,
  };
  // .Protocol.PlayerType player_type = 1;
  void clear_player_type();
  ::Protocol::PlayerType player_type() const;
  void set_player_type(::Protocol::PlayerType value);
  private:
  ::Protocol::PlayerType _internal_player_type() const;
  void _internal_set_player_type(::Protocol::PlayerType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int player_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ENTER_GAME_SUCCESS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ENTER_GAME_SUCCESS) */ {
 public:
  inline C_ENTER_GAME_SUCCESS() : C_ENTER_GAME_SUCCESS(nullptr) {}
  ~C_ENTER_GAME_SUCCESS() override;
  explicit PROTOBUF_CONSTEXPR C_ENTER_GAME_SUCCESS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ENTER_GAME_SUCCESS(const C_ENTER_GAME_SUCCESS& from);
  C_ENTER_GAME_SUCCESS(C_ENTER_GAME_SUCCESS&& from) noexcept
    : C_ENTER_GAME_SUCCESS() {
    *this = ::std::move(from);
  }

  inline C_ENTER_GAME_SUCCESS& operator=(const C_ENTER_GAME_SUCCESS& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ENTER_GAME_SUCCESS& operator=(C_ENTER_GAME_SUCCESS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ENTER_GAME_SUCCESS& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ENTER_GAME_SUCCESS* internal_default_instance() {
    return reinterpret_cast<const C_ENTER_GAME_SUCCESS*>(
               &_C_ENTER_GAME_SUCCESS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_ENTER_GAME_SUCCESS& a, C_ENTER_GAME_SUCCESS& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ENTER_GAME_SUCCESS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ENTER_GAME_SUCCESS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ENTER_GAME_SUCCESS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ENTER_GAME_SUCCESS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ENTER_GAME_SUCCESS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ENTER_GAME_SUCCESS& from) {
    C_ENTER_GAME_SUCCESS::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ENTER_GAME_SUCCESS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ENTER_GAME_SUCCESS";
  }
  protected:
  explicit C_ENTER_GAME_SUCCESS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .Protocol.PlayerInfo player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::PlayerInfo& player() const;
  PROTOBUF_NODISCARD ::Protocol::PlayerInfo* release_player();
  ::Protocol::PlayerInfo* mutable_player();
  void set_allocated_player(::Protocol::PlayerInfo* player);
  private:
  const ::Protocol::PlayerInfo& _internal_player() const;
  ::Protocol::PlayerInfo* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::PlayerInfo* player);
  ::Protocol::PlayerInfo* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:Protocol.C_ENTER_GAME_SUCCESS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PlayerInfo* player_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ENTER_GAME) */ {
 public:
  inline S_ENTER_GAME() : S_ENTER_GAME(nullptr) {}
  ~S_ENTER_GAME() override;
  explicit PROTOBUF_CONSTEXPR S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ENTER_GAME(const S_ENTER_GAME& from);
  S_ENTER_GAME(S_ENTER_GAME&& from) noexcept
    : S_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline S_ENTER_GAME& operator=(const S_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ENTER_GAME& operator=(S_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const S_ENTER_GAME*>(
               &_S_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_ENTER_GAME& a, S_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ENTER_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ENTER_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ENTER_GAME& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ENTER_GAME& from) {
    S_ENTER_GAME::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ENTER_GAME* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ENTER_GAME";
  }
  protected:
  explicit S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.PlayerInfo player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::PlayerInfo& player() const;
  PROTOBUF_NODISCARD ::Protocol::PlayerInfo* release_player();
  ::Protocol::PlayerInfo* mutable_player();
  void set_allocated_player(::Protocol::PlayerInfo* player);
  private:
  const ::Protocol::PlayerInfo& _internal_player() const;
  ::Protocol::PlayerInfo* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::PlayerInfo* player);
  ::Protocol::PlayerInfo* unsafe_arena_release_player();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PlayerInfo* player_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_LEAVE_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_LEAVE_GAME) */ {
 public:
  inline C_LEAVE_GAME() : C_LEAVE_GAME(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LEAVE_GAME(const C_LEAVE_GAME& from);
  C_LEAVE_GAME(C_LEAVE_GAME&& from) noexcept
    : C_LEAVE_GAME() {
    *this = ::std::move(from);
  }

  inline C_LEAVE_GAME& operator=(const C_LEAVE_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LEAVE_GAME& operator=(C_LEAVE_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LEAVE_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LEAVE_GAME* internal_default_instance() {
    return reinterpret_cast<const C_LEAVE_GAME*>(
               &_C_LEAVE_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C_LEAVE_GAME& a, C_LEAVE_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LEAVE_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LEAVE_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LEAVE_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LEAVE_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_LEAVE_GAME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_LEAVE_GAME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LEAVE_GAME";
  }
  protected:
  explicit C_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_LEAVE_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_SPAWN_PROJECTILE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SPAWN_PROJECTILE) */ {
 public:
  inline C_SPAWN_PROJECTILE() : C_SPAWN_PROJECTILE(nullptr) {}
  ~C_SPAWN_PROJECTILE() override;
  explicit PROTOBUF_CONSTEXPR C_SPAWN_PROJECTILE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SPAWN_PROJECTILE(const C_SPAWN_PROJECTILE& from);
  C_SPAWN_PROJECTILE(C_SPAWN_PROJECTILE&& from) noexcept
    : C_SPAWN_PROJECTILE() {
    *this = ::std::move(from);
  }

  inline C_SPAWN_PROJECTILE& operator=(const C_SPAWN_PROJECTILE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SPAWN_PROJECTILE& operator=(C_SPAWN_PROJECTILE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SPAWN_PROJECTILE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SPAWN_PROJECTILE* internal_default_instance() {
    return reinterpret_cast<const C_SPAWN_PROJECTILE*>(
               &_C_SPAWN_PROJECTILE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_SPAWN_PROJECTILE& a, C_SPAWN_PROJECTILE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SPAWN_PROJECTILE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SPAWN_PROJECTILE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SPAWN_PROJECTILE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SPAWN_PROJECTILE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_SPAWN_PROJECTILE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_SPAWN_PROJECTILE& from) {
    C_SPAWN_PROJECTILE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SPAWN_PROJECTILE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SPAWN_PROJECTILE";
  }
  protected:
  explicit C_SPAWN_PROJECTILE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kMeshFieldNumber = 2,
  };
  // .Protocol.ProjectileBasicInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Protocol::ProjectileBasicInfo& info() const;
  PROTOBUF_NODISCARD ::Protocol::ProjectileBasicInfo* release_info();
  ::Protocol::ProjectileBasicInfo* mutable_info();
  void set_allocated_info(::Protocol::ProjectileBasicInfo* info);
  private:
  const ::Protocol::ProjectileBasicInfo& _internal_info() const;
  ::Protocol::ProjectileBasicInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::Protocol::ProjectileBasicInfo* info);
  ::Protocol::ProjectileBasicInfo* unsafe_arena_release_info();

  // .Protocol.SkillMesh mesh = 2;
  void clear_mesh();
  ::Protocol::SkillMesh mesh() const;
  void set_mesh(::Protocol::SkillMesh value);
  private:
  ::Protocol::SkillMesh _internal_mesh() const;
  void _internal_set_mesh(::Protocol::SkillMesh value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SPAWN_PROJECTILE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ProjectileBasicInfo* info_;
    int mesh_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SPAWN_PROJECTILE_SUCESSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SPAWN_PROJECTILE_SUCESSE) */ {
 public:
  inline S_SPAWN_PROJECTILE_SUCESSE() : S_SPAWN_PROJECTILE_SUCESSE(nullptr) {}
  ~S_SPAWN_PROJECTILE_SUCESSE() override;
  explicit PROTOBUF_CONSTEXPR S_SPAWN_PROJECTILE_SUCESSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SPAWN_PROJECTILE_SUCESSE(const S_SPAWN_PROJECTILE_SUCESSE& from);
  S_SPAWN_PROJECTILE_SUCESSE(S_SPAWN_PROJECTILE_SUCESSE&& from) noexcept
    : S_SPAWN_PROJECTILE_SUCESSE() {
    *this = ::std::move(from);
  }

  inline S_SPAWN_PROJECTILE_SUCESSE& operator=(const S_SPAWN_PROJECTILE_SUCESSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SPAWN_PROJECTILE_SUCESSE& operator=(S_SPAWN_PROJECTILE_SUCESSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SPAWN_PROJECTILE_SUCESSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SPAWN_PROJECTILE_SUCESSE* internal_default_instance() {
    return reinterpret_cast<const S_SPAWN_PROJECTILE_SUCESSE*>(
               &_S_SPAWN_PROJECTILE_SUCESSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_SPAWN_PROJECTILE_SUCESSE& a, S_SPAWN_PROJECTILE_SUCESSE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SPAWN_PROJECTILE_SUCESSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SPAWN_PROJECTILE_SUCESSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SPAWN_PROJECTILE_SUCESSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SPAWN_PROJECTILE_SUCESSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SPAWN_PROJECTILE_SUCESSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SPAWN_PROJECTILE_SUCESSE& from) {
    S_SPAWN_PROJECTILE_SUCESSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SPAWN_PROJECTILE_SUCESSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SPAWN_PROJECTILE_SUCESSE";
  }
  protected:
  explicit S_SPAWN_PROJECTILE_SUCESSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 2,
    kProjectileIdFieldNumber = 1,
    kMeshFieldNumber = 3,
  };
  // .Protocol.Vector3 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::Protocol::Vector3& size() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_size();
  ::Protocol::Vector3* mutable_size();
  void set_allocated_size(::Protocol::Vector3* size);
  private:
  const ::Protocol::Vector3& _internal_size() const;
  ::Protocol::Vector3* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::Protocol::Vector3* size);
  ::Protocol::Vector3* unsafe_arena_release_size();

  // uint64 projectile_id = 1;
  void clear_projectile_id();
  uint64_t projectile_id() const;
  void set_projectile_id(uint64_t value);
  private:
  uint64_t _internal_projectile_id() const;
  void _internal_set_projectile_id(uint64_t value);
  public:

  // .Protocol.SkillMesh mesh = 3;
  void clear_mesh();
  ::Protocol::SkillMesh mesh() const;
  void set_mesh(::Protocol::SkillMesh value);
  private:
  ::Protocol::SkillMesh _internal_mesh() const;
  void _internal_set_mesh(::Protocol::SkillMesh value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SPAWN_PROJECTILE_SUCESSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* size_;
    uint64_t projectile_id_;
    int mesh_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LEAVE_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_LEAVE_GAME) */ {
 public:
  inline S_LEAVE_GAME() : S_LEAVE_GAME(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LEAVE_GAME(const S_LEAVE_GAME& from);
  S_LEAVE_GAME(S_LEAVE_GAME&& from) noexcept
    : S_LEAVE_GAME() {
    *this = ::std::move(from);
  }

  inline S_LEAVE_GAME& operator=(const S_LEAVE_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LEAVE_GAME& operator=(S_LEAVE_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LEAVE_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LEAVE_GAME* internal_default_instance() {
    return reinterpret_cast<const S_LEAVE_GAME*>(
               &_S_LEAVE_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_LEAVE_GAME& a, S_LEAVE_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LEAVE_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LEAVE_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LEAVE_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LEAVE_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_LEAVE_GAME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_LEAVE_GAME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LEAVE_GAME";
  }
  protected:
  explicit S_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_LEAVE_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MOVE) */ {
 public:
  inline C_MOVE() : C_MOVE(nullptr) {}
  ~C_MOVE() override;
  explicit PROTOBUF_CONSTEXPR C_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MOVE(const C_MOVE& from);
  C_MOVE(C_MOVE&& from) noexcept
    : C_MOVE() {
    *this = ::std::move(from);
  }

  inline C_MOVE& operator=(const C_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MOVE& operator=(C_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MOVE* internal_default_instance() {
    return reinterpret_cast<const C_MOVE*>(
               &_C_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C_MOVE& a, C_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MOVE& from) {
    C_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MOVE";
  }
  protected:
  explicit C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerMoveInfoFieldNumber = 1,
    kDirFieldNumber = 2,
    kMeshFieldNumber = 3,
    kIsMoveFieldNumber = 4,
  };
  // .Protocol.PlayerMoveInfo player_move_info = 1;
  bool has_player_move_info() const;
  private:
  bool _internal_has_player_move_info() const;
  public:
  void clear_player_move_info();
  const ::Protocol::PlayerMoveInfo& player_move_info() const;
  PROTOBUF_NODISCARD ::Protocol::PlayerMoveInfo* release_player_move_info();
  ::Protocol::PlayerMoveInfo* mutable_player_move_info();
  void set_allocated_player_move_info(::Protocol::PlayerMoveInfo* player_move_info);
  private:
  const ::Protocol::PlayerMoveInfo& _internal_player_move_info() const;
  ::Protocol::PlayerMoveInfo* _internal_mutable_player_move_info();
  public:
  void unsafe_arena_set_allocated_player_move_info(
      ::Protocol::PlayerMoveInfo* player_move_info);
  ::Protocol::PlayerMoveInfo* unsafe_arena_release_player_move_info();

  // .Protocol.Vector3 dir = 2;
  bool has_dir() const;
  private:
  bool _internal_has_dir() const;
  public:
  void clear_dir();
  const ::Protocol::Vector3& dir() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_dir();
  ::Protocol::Vector3* mutable_dir();
  void set_allocated_dir(::Protocol::Vector3* dir);
  private:
  const ::Protocol::Vector3& _internal_dir() const;
  ::Protocol::Vector3* _internal_mutable_dir();
  public:
  void unsafe_arena_set_allocated_dir(
      ::Protocol::Vector3* dir);
  ::Protocol::Vector3* unsafe_arena_release_dir();

  // .Protocol.SkillMesh mesh = 3;
  void clear_mesh();
  ::Protocol::SkillMesh mesh() const;
  void set_mesh(::Protocol::SkillMesh value);
  private:
  ::Protocol::SkillMesh _internal_mesh() const;
  void _internal_set_mesh(::Protocol::SkillMesh value);
  public:

  // bool IsMove = 4;
  void clear_ismove();
  bool ismove() const;
  void set_ismove(bool value);
  private:
  bool _internal_ismove() const;
  void _internal_set_ismove(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PlayerMoveInfo* player_move_info_;
    ::Protocol::Vector3* dir_;
    int mesh_;
    bool ismove_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MOVE_PROJECTILE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MOVE_PROJECTILE) */ {
 public:
  inline C_MOVE_PROJECTILE() : C_MOVE_PROJECTILE(nullptr) {}
  ~C_MOVE_PROJECTILE() override;
  explicit PROTOBUF_CONSTEXPR C_MOVE_PROJECTILE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MOVE_PROJECTILE(const C_MOVE_PROJECTILE& from);
  C_MOVE_PROJECTILE(C_MOVE_PROJECTILE&& from) noexcept
    : C_MOVE_PROJECTILE() {
    *this = ::std::move(from);
  }

  inline C_MOVE_PROJECTILE& operator=(const C_MOVE_PROJECTILE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MOVE_PROJECTILE& operator=(C_MOVE_PROJECTILE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MOVE_PROJECTILE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MOVE_PROJECTILE* internal_default_instance() {
    return reinterpret_cast<const C_MOVE_PROJECTILE*>(
               &_C_MOVE_PROJECTILE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C_MOVE_PROJECTILE& a, C_MOVE_PROJECTILE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MOVE_PROJECTILE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MOVE_PROJECTILE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MOVE_PROJECTILE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MOVE_PROJECTILE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MOVE_PROJECTILE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MOVE_PROJECTILE& from) {
    C_MOVE_PROJECTILE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MOVE_PROJECTILE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MOVE_PROJECTILE";
  }
  protected:
  explicit C_MOVE_PROJECTILE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectileInfoFieldNumber = 1,
  };
  // .Protocol.ProjectileInfo projectile_info = 1;
  bool has_projectile_info() const;
  private:
  bool _internal_has_projectile_info() const;
  public:
  void clear_projectile_info();
  const ::Protocol::ProjectileInfo& projectile_info() const;
  PROTOBUF_NODISCARD ::Protocol::ProjectileInfo* release_projectile_info();
  ::Protocol::ProjectileInfo* mutable_projectile_info();
  void set_allocated_projectile_info(::Protocol::ProjectileInfo* projectile_info);
  private:
  const ::Protocol::ProjectileInfo& _internal_projectile_info() const;
  ::Protocol::ProjectileInfo* _internal_mutable_projectile_info();
  public:
  void unsafe_arena_set_allocated_projectile_info(
      ::Protocol::ProjectileInfo* projectile_info);
  ::Protocol::ProjectileInfo* unsafe_arena_release_projectile_info();

  // @@protoc_insertion_point(class_scope:Protocol.C_MOVE_PROJECTILE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ProjectileInfo* projectile_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MOVE) */ {
 public:
  inline S_MOVE() : S_MOVE(nullptr) {}
  ~S_MOVE() override;
  explicit PROTOBUF_CONSTEXPR S_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MOVE(const S_MOVE& from);
  S_MOVE(S_MOVE&& from) noexcept
    : S_MOVE() {
    *this = ::std::move(from);
  }

  inline S_MOVE& operator=(const S_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MOVE& operator=(S_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MOVE* internal_default_instance() {
    return reinterpret_cast<const S_MOVE*>(
               &_S_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_MOVE& a, S_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MOVE& from) {
    S_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MOVE";
  }
  protected:
  explicit S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerMoveInfoFieldNumber = 1,
  };
  // .Protocol.PlayerMoveInfo player_move_info = 1;
  bool has_player_move_info() const;
  private:
  bool _internal_has_player_move_info() const;
  public:
  void clear_player_move_info();
  const ::Protocol::PlayerMoveInfo& player_move_info() const;
  PROTOBUF_NODISCARD ::Protocol::PlayerMoveInfo* release_player_move_info();
  ::Protocol::PlayerMoveInfo* mutable_player_move_info();
  void set_allocated_player_move_info(::Protocol::PlayerMoveInfo* player_move_info);
  private:
  const ::Protocol::PlayerMoveInfo& _internal_player_move_info() const;
  ::Protocol::PlayerMoveInfo* _internal_mutable_player_move_info();
  public:
  void unsafe_arena_set_allocated_player_move_info(
      ::Protocol::PlayerMoveInfo* player_move_info);
  ::Protocol::PlayerMoveInfo* unsafe_arena_release_player_move_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PlayerMoveInfo* player_move_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_UPDATE_PLAYER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_UPDATE_PLAYER) */ {
 public:
  inline S_UPDATE_PLAYER() : S_UPDATE_PLAYER(nullptr) {}
  ~S_UPDATE_PLAYER() override;
  explicit PROTOBUF_CONSTEXPR S_UPDATE_PLAYER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_UPDATE_PLAYER(const S_UPDATE_PLAYER& from);
  S_UPDATE_PLAYER(S_UPDATE_PLAYER&& from) noexcept
    : S_UPDATE_PLAYER() {
    *this = ::std::move(from);
  }

  inline S_UPDATE_PLAYER& operator=(const S_UPDATE_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_UPDATE_PLAYER& operator=(S_UPDATE_PLAYER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_UPDATE_PLAYER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_UPDATE_PLAYER* internal_default_instance() {
    return reinterpret_cast<const S_UPDATE_PLAYER*>(
               &_S_UPDATE_PLAYER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(S_UPDATE_PLAYER& a, S_UPDATE_PLAYER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_UPDATE_PLAYER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_UPDATE_PLAYER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_UPDATE_PLAYER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_UPDATE_PLAYER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_UPDATE_PLAYER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_UPDATE_PLAYER& from) {
    S_UPDATE_PLAYER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_UPDATE_PLAYER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_UPDATE_PLAYER";
  }
  protected:
  explicit S_UPDATE_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerUpdateInfoFieldNumber = 1,
  };
  // .Protocol.PlayerUpdateInfo player_update_info = 1;
  bool has_player_update_info() const;
  private:
  bool _internal_has_player_update_info() const;
  public:
  void clear_player_update_info();
  const ::Protocol::PlayerUpdateInfo& player_update_info() const;
  PROTOBUF_NODISCARD ::Protocol::PlayerUpdateInfo* release_player_update_info();
  ::Protocol::PlayerUpdateInfo* mutable_player_update_info();
  void set_allocated_player_update_info(::Protocol::PlayerUpdateInfo* player_update_info);
  private:
  const ::Protocol::PlayerUpdateInfo& _internal_player_update_info() const;
  ::Protocol::PlayerUpdateInfo* _internal_mutable_player_update_info();
  public:
  void unsafe_arena_set_allocated_player_update_info(
      ::Protocol::PlayerUpdateInfo* player_update_info);
  ::Protocol::PlayerUpdateInfo* unsafe_arena_release_player_update_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_UPDATE_PLAYER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PlayerUpdateInfo* player_update_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MONSTER_INFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MONSTER_INFO) */ {
 public:
  inline S_MONSTER_INFO() : S_MONSTER_INFO(nullptr) {}
  ~S_MONSTER_INFO() override;
  explicit PROTOBUF_CONSTEXPR S_MONSTER_INFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MONSTER_INFO(const S_MONSTER_INFO& from);
  S_MONSTER_INFO(S_MONSTER_INFO&& from) noexcept
    : S_MONSTER_INFO() {
    *this = ::std::move(from);
  }

  inline S_MONSTER_INFO& operator=(const S_MONSTER_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MONSTER_INFO& operator=(S_MONSTER_INFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MONSTER_INFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MONSTER_INFO* internal_default_instance() {
    return reinterpret_cast<const S_MONSTER_INFO*>(
               &_S_MONSTER_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_MONSTER_INFO& a, S_MONSTER_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MONSTER_INFO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MONSTER_INFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MONSTER_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MONSTER_INFO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MONSTER_INFO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MONSTER_INFO& from) {
    S_MONSTER_INFO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MONSTER_INFO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MONSTER_INFO";
  }
  protected:
  explicit S_MONSTER_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterInfoFieldNumber = 1,
  };
  // repeated .Protocol.MonsterInfo monster_info = 1;
  int monster_info_size() const;
  private:
  int _internal_monster_info_size() const;
  public:
  void clear_monster_info();
  ::Protocol::MonsterInfo* mutable_monster_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::MonsterInfo >*
      mutable_monster_info();
  private:
  const ::Protocol::MonsterInfo& _internal_monster_info(int index) const;
  ::Protocol::MonsterInfo* _internal_add_monster_info();
  public:
  const ::Protocol::MonsterInfo& monster_info(int index) const;
  ::Protocol::MonsterInfo* add_monster_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::MonsterInfo >&
      monster_info() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_MONSTER_INFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::MonsterInfo > monster_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PROJECTILE_INFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PROJECTILE_INFO) */ {
 public:
  inline S_PROJECTILE_INFO() : S_PROJECTILE_INFO(nullptr) {}
  ~S_PROJECTILE_INFO() override;
  explicit PROTOBUF_CONSTEXPR S_PROJECTILE_INFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PROJECTILE_INFO(const S_PROJECTILE_INFO& from);
  S_PROJECTILE_INFO(S_PROJECTILE_INFO&& from) noexcept
    : S_PROJECTILE_INFO() {
    *this = ::std::move(from);
  }

  inline S_PROJECTILE_INFO& operator=(const S_PROJECTILE_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PROJECTILE_INFO& operator=(S_PROJECTILE_INFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PROJECTILE_INFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PROJECTILE_INFO* internal_default_instance() {
    return reinterpret_cast<const S_PROJECTILE_INFO*>(
               &_S_PROJECTILE_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(S_PROJECTILE_INFO& a, S_PROJECTILE_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PROJECTILE_INFO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PROJECTILE_INFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_PROJECTILE_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_PROJECTILE_INFO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_PROJECTILE_INFO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_PROJECTILE_INFO& from) {
    S_PROJECTILE_INFO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PROJECTILE_INFO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PROJECTILE_INFO";
  }
  protected:
  explicit S_PROJECTILE_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectileInfoFieldNumber = 1,
  };
  // .Protocol.ProjectileInfo projectile_info = 1;
  bool has_projectile_info() const;
  private:
  bool _internal_has_projectile_info() const;
  public:
  void clear_projectile_info();
  const ::Protocol::ProjectileInfo& projectile_info() const;
  PROTOBUF_NODISCARD ::Protocol::ProjectileInfo* release_projectile_info();
  ::Protocol::ProjectileInfo* mutable_projectile_info();
  void set_allocated_projectile_info(::Protocol::ProjectileInfo* projectile_info);
  private:
  const ::Protocol::ProjectileInfo& _internal_projectile_info() const;
  ::Protocol::ProjectileInfo* _internal_mutable_projectile_info();
  public:
  void unsafe_arena_set_allocated_projectile_info(
      ::Protocol::ProjectileInfo* projectile_info);
  ::Protocol::ProjectileInfo* unsafe_arena_release_projectile_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_PROJECTILE_INFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ProjectileInfo* projectile_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SPAWN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SPAWN) */ {
 public:
  inline S_SPAWN() : S_SPAWN(nullptr) {}
  ~S_SPAWN() override;
  explicit PROTOBUF_CONSTEXPR S_SPAWN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SPAWN(const S_SPAWN& from);
  S_SPAWN(S_SPAWN&& from) noexcept
    : S_SPAWN() {
    *this = ::std::move(from);
  }

  inline S_SPAWN& operator=(const S_SPAWN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SPAWN& operator=(S_SPAWN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SPAWN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SPAWN* internal_default_instance() {
    return reinterpret_cast<const S_SPAWN*>(
               &_S_SPAWN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S_SPAWN& a, S_SPAWN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SPAWN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SPAWN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SPAWN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SPAWN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SPAWN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SPAWN& from) {
    S_SPAWN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SPAWN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SPAWN";
  }
  protected:
  explicit S_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 1,
  };
  // repeated .Protocol.ObjectInfo objects = 1;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::Protocol::ObjectInfo* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
      mutable_objects();
  private:
  const ::Protocol::ObjectInfo& _internal_objects(int index) const;
  ::Protocol::ObjectInfo* _internal_add_objects();
  public:
  const ::Protocol::ObjectInfo& objects(int index) const;
  ::Protocol::ObjectInfo* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
      objects() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_SPAWN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo > objects_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SPAWN_NEW_PLAYER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SPAWN_NEW_PLAYER) */ {
 public:
  inline S_SPAWN_NEW_PLAYER() : S_SPAWN_NEW_PLAYER(nullptr) {}
  ~S_SPAWN_NEW_PLAYER() override;
  explicit PROTOBUF_CONSTEXPR S_SPAWN_NEW_PLAYER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SPAWN_NEW_PLAYER(const S_SPAWN_NEW_PLAYER& from);
  S_SPAWN_NEW_PLAYER(S_SPAWN_NEW_PLAYER&& from) noexcept
    : S_SPAWN_NEW_PLAYER() {
    *this = ::std::move(from);
  }

  inline S_SPAWN_NEW_PLAYER& operator=(const S_SPAWN_NEW_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SPAWN_NEW_PLAYER& operator=(S_SPAWN_NEW_PLAYER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SPAWN_NEW_PLAYER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SPAWN_NEW_PLAYER* internal_default_instance() {
    return reinterpret_cast<const S_SPAWN_NEW_PLAYER*>(
               &_S_SPAWN_NEW_PLAYER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(S_SPAWN_NEW_PLAYER& a, S_SPAWN_NEW_PLAYER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SPAWN_NEW_PLAYER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SPAWN_NEW_PLAYER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SPAWN_NEW_PLAYER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SPAWN_NEW_PLAYER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SPAWN_NEW_PLAYER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SPAWN_NEW_PLAYER& from) {
    S_SPAWN_NEW_PLAYER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SPAWN_NEW_PLAYER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SPAWN_NEW_PLAYER";
  }
  protected:
  explicit S_SPAWN_NEW_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .Protocol.PlayerInfo player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::PlayerInfo& player() const;
  PROTOBUF_NODISCARD ::Protocol::PlayerInfo* release_player();
  ::Protocol::PlayerInfo* mutable_player();
  void set_allocated_player(::Protocol::PlayerInfo* player);
  private:
  const ::Protocol::PlayerInfo& _internal_player() const;
  ::Protocol::PlayerInfo* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::PlayerInfo* player);
  ::Protocol::PlayerInfo* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:Protocol.S_SPAWN_NEW_PLAYER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PlayerInfo* player_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SPAWN_EXISTING_PLAYER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SPAWN_EXISTING_PLAYER) */ {
 public:
  inline S_SPAWN_EXISTING_PLAYER() : S_SPAWN_EXISTING_PLAYER(nullptr) {}
  ~S_SPAWN_EXISTING_PLAYER() override;
  explicit PROTOBUF_CONSTEXPR S_SPAWN_EXISTING_PLAYER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SPAWN_EXISTING_PLAYER(const S_SPAWN_EXISTING_PLAYER& from);
  S_SPAWN_EXISTING_PLAYER(S_SPAWN_EXISTING_PLAYER&& from) noexcept
    : S_SPAWN_EXISTING_PLAYER() {
    *this = ::std::move(from);
  }

  inline S_SPAWN_EXISTING_PLAYER& operator=(const S_SPAWN_EXISTING_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SPAWN_EXISTING_PLAYER& operator=(S_SPAWN_EXISTING_PLAYER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SPAWN_EXISTING_PLAYER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SPAWN_EXISTING_PLAYER* internal_default_instance() {
    return reinterpret_cast<const S_SPAWN_EXISTING_PLAYER*>(
               &_S_SPAWN_EXISTING_PLAYER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S_SPAWN_EXISTING_PLAYER& a, S_SPAWN_EXISTING_PLAYER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SPAWN_EXISTING_PLAYER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SPAWN_EXISTING_PLAYER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SPAWN_EXISTING_PLAYER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SPAWN_EXISTING_PLAYER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SPAWN_EXISTING_PLAYER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SPAWN_EXISTING_PLAYER& from) {
    S_SPAWN_EXISTING_PLAYER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SPAWN_EXISTING_PLAYER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SPAWN_EXISTING_PLAYER";
  }
  protected:
  explicit S_SPAWN_EXISTING_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // repeated .Protocol.PlayerInfo player = 1;
  int player_size() const;
  private:
  int _internal_player_size() const;
  public:
  void clear_player();
  ::Protocol::PlayerInfo* mutable_player(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >*
      mutable_player();
  private:
  const ::Protocol::PlayerInfo& _internal_player(int index) const;
  ::Protocol::PlayerInfo* _internal_add_player();
  public:
  const ::Protocol::PlayerInfo& player(int index) const;
  ::Protocol::PlayerInfo* add_player();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >&
      player() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_SPAWN_EXISTING_PLAYER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo > player_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_DESPAWN_PLAYER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DESPAWN_PLAYER) */ {
 public:
  inline S_DESPAWN_PLAYER() : S_DESPAWN_PLAYER(nullptr) {}
  ~S_DESPAWN_PLAYER() override;
  explicit PROTOBUF_CONSTEXPR S_DESPAWN_PLAYER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DESPAWN_PLAYER(const S_DESPAWN_PLAYER& from);
  S_DESPAWN_PLAYER(S_DESPAWN_PLAYER&& from) noexcept
    : S_DESPAWN_PLAYER() {
    *this = ::std::move(from);
  }

  inline S_DESPAWN_PLAYER& operator=(const S_DESPAWN_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DESPAWN_PLAYER& operator=(S_DESPAWN_PLAYER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DESPAWN_PLAYER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DESPAWN_PLAYER* internal_default_instance() {
    return reinterpret_cast<const S_DESPAWN_PLAYER*>(
               &_S_DESPAWN_PLAYER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(S_DESPAWN_PLAYER& a, S_DESPAWN_PLAYER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DESPAWN_PLAYER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DESPAWN_PLAYER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DESPAWN_PLAYER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DESPAWN_PLAYER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_DESPAWN_PLAYER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_DESPAWN_PLAYER& from) {
    S_DESPAWN_PLAYER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DESPAWN_PLAYER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DESPAWN_PLAYER";
  }
  protected:
  explicit S_DESPAWN_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdsFieldNumber = 1,
  };
  // uint64 player_ids = 1;
  void clear_player_ids();
  uint64_t player_ids() const;
  void set_player_ids(uint64_t value);
  private:
  uint64_t _internal_player_ids() const;
  void _internal_set_player_ids(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_DESPAWN_PLAYER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t player_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_DESPAWN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DESPAWN) */ {
 public:
  inline S_DESPAWN() : S_DESPAWN(nullptr) {}
  ~S_DESPAWN() override;
  explicit PROTOBUF_CONSTEXPR S_DESPAWN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DESPAWN(const S_DESPAWN& from);
  S_DESPAWN(S_DESPAWN&& from) noexcept
    : S_DESPAWN() {
    *this = ::std::move(from);
  }

  inline S_DESPAWN& operator=(const S_DESPAWN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DESPAWN& operator=(S_DESPAWN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DESPAWN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DESPAWN* internal_default_instance() {
    return reinterpret_cast<const S_DESPAWN*>(
               &_S_DESPAWN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S_DESPAWN& a, S_DESPAWN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DESPAWN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DESPAWN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DESPAWN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DESPAWN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_DESPAWN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_DESPAWN& from) {
    S_DESPAWN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DESPAWN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DESPAWN";
  }
  protected:
  explicit S_DESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdsFieldNumber = 1,
  };
  // repeated uint64 object_ids = 1;
  int object_ids_size() const;
  private:
  int _internal_object_ids_size() const;
  public:
  void clear_object_ids();
  private:
  uint64_t _internal_object_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_object_ids() const;
  void _internal_add_object_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_object_ids();
  public:
  uint64_t object_ids(int index) const;
  void set_object_ids(int index, uint64_t value);
  void add_object_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      object_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_object_ids();

  // @@protoc_insertion_point(class_scope:Protocol.S_DESPAWN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > object_ids_;
    mutable std::atomic<int> _object_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_GATE_OPNE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_GATE_OPNE) */ {
 public:
  inline S_GATE_OPNE() : S_GATE_OPNE(nullptr) {}
  ~S_GATE_OPNE() override;
  explicit PROTOBUF_CONSTEXPR S_GATE_OPNE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_GATE_OPNE(const S_GATE_OPNE& from);
  S_GATE_OPNE(S_GATE_OPNE&& from) noexcept
    : S_GATE_OPNE() {
    *this = ::std::move(from);
  }

  inline S_GATE_OPNE& operator=(const S_GATE_OPNE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_GATE_OPNE& operator=(S_GATE_OPNE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_GATE_OPNE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_GATE_OPNE* internal_default_instance() {
    return reinterpret_cast<const S_GATE_OPNE*>(
               &_S_GATE_OPNE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(S_GATE_OPNE& a, S_GATE_OPNE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_GATE_OPNE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_GATE_OPNE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_GATE_OPNE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_GATE_OPNE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_GATE_OPNE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_GATE_OPNE& from) {
    S_GATE_OPNE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_GATE_OPNE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_GATE_OPNE";
  }
  protected:
  explicit S_GATE_OPNE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenObjectsFieldNumber = 1,
  };
  // repeated .Protocol.ObjectInfo open_objects = 1;
  int open_objects_size() const;
  private:
  int _internal_open_objects_size() const;
  public:
  void clear_open_objects();
  ::Protocol::ObjectInfo* mutable_open_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
      mutable_open_objects();
  private:
  const ::Protocol::ObjectInfo& _internal_open_objects(int index) const;
  ::Protocol::ObjectInfo* _internal_add_open_objects();
  public:
  const ::Protocol::ObjectInfo& open_objects(int index) const;
  ::Protocol::ObjectInfo* add_open_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
      open_objects() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_GATE_OPNE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo > open_objects_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_GATE_CLOSE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_GATE_CLOSE) */ {
 public:
  inline S_GATE_CLOSE() : S_GATE_CLOSE(nullptr) {}
  ~S_GATE_CLOSE() override;
  explicit PROTOBUF_CONSTEXPR S_GATE_CLOSE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_GATE_CLOSE(const S_GATE_CLOSE& from);
  S_GATE_CLOSE(S_GATE_CLOSE&& from) noexcept
    : S_GATE_CLOSE() {
    *this = ::std::move(from);
  }

  inline S_GATE_CLOSE& operator=(const S_GATE_CLOSE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_GATE_CLOSE& operator=(S_GATE_CLOSE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_GATE_CLOSE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_GATE_CLOSE* internal_default_instance() {
    return reinterpret_cast<const S_GATE_CLOSE*>(
               &_S_GATE_CLOSE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(S_GATE_CLOSE& a, S_GATE_CLOSE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_GATE_CLOSE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_GATE_CLOSE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_GATE_CLOSE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_GATE_CLOSE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_GATE_CLOSE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_GATE_CLOSE& from) {
    S_GATE_CLOSE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_GATE_CLOSE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_GATE_CLOSE";
  }
  protected:
  explicit S_GATE_CLOSE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCloaseObjectsFieldNumber = 1,
  };
  // repeated .Protocol.ObjectInfo cloase_objects = 1;
  int cloase_objects_size() const;
  private:
  int _internal_cloase_objects_size() const;
  public:
  void clear_cloase_objects();
  ::Protocol::ObjectInfo* mutable_cloase_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
      mutable_cloase_objects();
  private:
  const ::Protocol::ObjectInfo& _internal_cloase_objects(int index) const;
  ::Protocol::ObjectInfo* _internal_add_cloase_objects();
  public:
  const ::Protocol::ObjectInfo& cloase_objects(int index) const;
  ::Protocol::ObjectInfo* add_cloase_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
      cloase_objects() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_GATE_CLOSE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo > cloase_objects_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SPAWN_NPC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SPAWN_NPC) */ {
 public:
  inline S_SPAWN_NPC() : S_SPAWN_NPC(nullptr) {}
  ~S_SPAWN_NPC() override;
  explicit PROTOBUF_CONSTEXPR S_SPAWN_NPC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SPAWN_NPC(const S_SPAWN_NPC& from);
  S_SPAWN_NPC(S_SPAWN_NPC&& from) noexcept
    : S_SPAWN_NPC() {
    *this = ::std::move(from);
  }

  inline S_SPAWN_NPC& operator=(const S_SPAWN_NPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SPAWN_NPC& operator=(S_SPAWN_NPC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SPAWN_NPC& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SPAWN_NPC* internal_default_instance() {
    return reinterpret_cast<const S_SPAWN_NPC*>(
               &_S_SPAWN_NPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(S_SPAWN_NPC& a, S_SPAWN_NPC& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SPAWN_NPC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SPAWN_NPC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SPAWN_NPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SPAWN_NPC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SPAWN_NPC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SPAWN_NPC& from) {
    S_SPAWN_NPC::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SPAWN_NPC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SPAWN_NPC";
  }
  protected:
  explicit S_SPAWN_NPC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcInfoFieldNumber = 1,
  };
  // repeated .Protocol.NpcInfo npc_info = 1;
  int npc_info_size() const;
  private:
  int _internal_npc_info_size() const;
  public:
  void clear_npc_info();
  ::Protocol::NpcInfo* mutable_npc_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::NpcInfo >*
      mutable_npc_info();
  private:
  const ::Protocol::NpcInfo& _internal_npc_info(int index) const;
  ::Protocol::NpcInfo* _internal_add_npc_info();
  public:
  const ::Protocol::NpcInfo& npc_info(int index) const;
  ::Protocol::NpcInfo* add_npc_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::NpcInfo >&
      npc_info() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_SPAWN_NPC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::NpcInfo > npc_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_BUY_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_BUY_ITEM) */ {
 public:
  inline C_BUY_ITEM() : C_BUY_ITEM(nullptr) {}
  ~C_BUY_ITEM() override;
  explicit PROTOBUF_CONSTEXPR C_BUY_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_BUY_ITEM(const C_BUY_ITEM& from);
  C_BUY_ITEM(C_BUY_ITEM&& from) noexcept
    : C_BUY_ITEM() {
    *this = ::std::move(from);
  }

  inline C_BUY_ITEM& operator=(const C_BUY_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_BUY_ITEM& operator=(C_BUY_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_BUY_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_BUY_ITEM* internal_default_instance() {
    return reinterpret_cast<const C_BUY_ITEM*>(
               &_C_BUY_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(C_BUY_ITEM& a, C_BUY_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_BUY_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_BUY_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_BUY_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_BUY_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_BUY_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_BUY_ITEM& from) {
    C_BUY_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_BUY_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_BUY_ITEM";
  }
  protected:
  explicit C_BUY_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
  };
  // uint32 item_id = 1;
  void clear_item_id();
  uint32_t item_id() const;
  void set_item_id(uint32_t value);
  private:
  uint32_t _internal_item_id() const;
  void _internal_set_item_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_BUY_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t item_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_UPDATE_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_UPDATE_ITEM) */ {
 public:
  inline S_UPDATE_ITEM() : S_UPDATE_ITEM(nullptr) {}
  ~S_UPDATE_ITEM() override;
  explicit PROTOBUF_CONSTEXPR S_UPDATE_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_UPDATE_ITEM(const S_UPDATE_ITEM& from);
  S_UPDATE_ITEM(S_UPDATE_ITEM&& from) noexcept
    : S_UPDATE_ITEM() {
    *this = ::std::move(from);
  }

  inline S_UPDATE_ITEM& operator=(const S_UPDATE_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_UPDATE_ITEM& operator=(S_UPDATE_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_UPDATE_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_UPDATE_ITEM* internal_default_instance() {
    return reinterpret_cast<const S_UPDATE_ITEM*>(
               &_S_UPDATE_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(S_UPDATE_ITEM& a, S_UPDATE_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_UPDATE_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_UPDATE_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_UPDATE_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_UPDATE_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_UPDATE_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_UPDATE_ITEM& from) {
    S_UPDATE_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_UPDATE_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_UPDATE_ITEM";
  }
  protected:
  explicit S_UPDATE_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemInfoFieldNumber = 2,
    kNpcIdFieldNumber = 1,
  };
  // repeated .Protocol.ItemInfo item_info = 2;
  int item_info_size() const;
  private:
  int _internal_item_info_size() const;
  public:
  void clear_item_info();
  ::Protocol::ItemInfo* mutable_item_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >*
      mutable_item_info();
  private:
  const ::Protocol::ItemInfo& _internal_item_info(int index) const;
  ::Protocol::ItemInfo* _internal_add_item_info();
  public:
  const ::Protocol::ItemInfo& item_info(int index) const;
  ::Protocol::ItemInfo* add_item_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >&
      item_info() const;

  // uint32 npc_id = 1;
  void clear_npc_id();
  uint32_t npc_id() const;
  void set_npc_id(uint32_t value);
  private:
  uint32_t _internal_npc_id() const;
  void _internal_set_npc_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_UPDATE_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo > item_info_;
    uint32_t npc_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_BUY_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_BUY_ITEM) */ {
 public:
  inline S_BUY_ITEM() : S_BUY_ITEM(nullptr) {}
  ~S_BUY_ITEM() override;
  explicit PROTOBUF_CONSTEXPR S_BUY_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_BUY_ITEM(const S_BUY_ITEM& from);
  S_BUY_ITEM(S_BUY_ITEM&& from) noexcept
    : S_BUY_ITEM() {
    *this = ::std::move(from);
  }

  inline S_BUY_ITEM& operator=(const S_BUY_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_BUY_ITEM& operator=(S_BUY_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_BUY_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_BUY_ITEM* internal_default_instance() {
    return reinterpret_cast<const S_BUY_ITEM*>(
               &_S_BUY_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(S_BUY_ITEM& a, S_BUY_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_BUY_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_BUY_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_BUY_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_BUY_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_BUY_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_BUY_ITEM& from) {
    S_BUY_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_BUY_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_BUY_ITEM";
  }
  protected:
  explicit S_BUY_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsSuccessFieldNumber = 1,
  };
  // bool is_success = 1;
  void clear_is_success();
  bool is_success() const;
  void set_is_success(bool value);
  private:
  bool _internal_is_success() const;
  void _internal_set_is_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_BUY_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool is_success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_LOGIN

// -------------------------------------------------------------------

// S_LOGIN

// bool success = 1;
inline void S_LOGIN::clear_success() {
  _impl_.success_ = false;
}
inline bool S_LOGIN::_internal_success() const {
  return _impl_.success_;
}
inline bool S_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.success)
  return _internal_success();
}
inline void S_LOGIN::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.success)
}

// -------------------------------------------------------------------

// C_ENTER_GAME

// .Protocol.PlayerType player_type = 1;
inline void C_ENTER_GAME::clear_player_type() {
  _impl_.player_type_ = 0;
}
inline ::Protocol::PlayerType C_ENTER_GAME::_internal_player_type() const {
  return static_cast< ::Protocol::PlayerType >(_impl_.player_type_);
}
inline ::Protocol::PlayerType C_ENTER_GAME::player_type() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ENTER_GAME.player_type)
  return _internal_player_type();
}
inline void C_ENTER_GAME::_internal_set_player_type(::Protocol::PlayerType value) {
  
  _impl_.player_type_ = value;
}
inline void C_ENTER_GAME::set_player_type(::Protocol::PlayerType value) {
  _internal_set_player_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ENTER_GAME.player_type)
}

// -------------------------------------------------------------------

// C_ENTER_GAME_SUCCESS

// .Protocol.PlayerInfo player = 1;
inline bool C_ENTER_GAME_SUCCESS::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool C_ENTER_GAME_SUCCESS::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::PlayerInfo& C_ENTER_GAME_SUCCESS::_internal_player() const {
  const ::Protocol::PlayerInfo* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerInfo&>(
      ::Protocol::_PlayerInfo_default_instance_);
}
inline const ::Protocol::PlayerInfo& C_ENTER_GAME_SUCCESS::player() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ENTER_GAME_SUCCESS.player)
  return _internal_player();
}
inline void C_ENTER_GAME_SUCCESS::unsafe_arena_set_allocated_player(
    ::Protocol::PlayerInfo* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_ENTER_GAME_SUCCESS.player)
}
inline ::Protocol::PlayerInfo* C_ENTER_GAME_SUCCESS::release_player() {
  
  ::Protocol::PlayerInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PlayerInfo* C_ENTER_GAME_SUCCESS::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.C_ENTER_GAME_SUCCESS.player)
  
  ::Protocol::PlayerInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerInfo* C_ENTER_GAME_SUCCESS::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerInfo>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::PlayerInfo* C_ENTER_GAME_SUCCESS::mutable_player() {
  ::Protocol::PlayerInfo* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.C_ENTER_GAME_SUCCESS.player)
  return _msg;
}
inline void C_ENTER_GAME_SUCCESS::set_allocated_player(::Protocol::PlayerInfo* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ENTER_GAME_SUCCESS.player)
}

// -------------------------------------------------------------------

// S_ENTER_GAME

// bool success = 1;
inline void S_ENTER_GAME::clear_success() {
  _impl_.success_ = false;
}
inline bool S_ENTER_GAME::_internal_success() const {
  return _impl_.success_;
}
inline bool S_ENTER_GAME::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.success)
  return _internal_success();
}
inline void S_ENTER_GAME::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_ENTER_GAME::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_GAME.success)
}

// .Protocol.PlayerInfo player = 2;
inline bool S_ENTER_GAME::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool S_ENTER_GAME::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::PlayerInfo& S_ENTER_GAME::_internal_player() const {
  const ::Protocol::PlayerInfo* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerInfo&>(
      ::Protocol::_PlayerInfo_default_instance_);
}
inline const ::Protocol::PlayerInfo& S_ENTER_GAME::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.player)
  return _internal_player();
}
inline void S_ENTER_GAME::unsafe_arena_set_allocated_player(
    ::Protocol::PlayerInfo* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ENTER_GAME.player)
}
inline ::Protocol::PlayerInfo* S_ENTER_GAME::release_player() {
  
  ::Protocol::PlayerInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PlayerInfo* S_ENTER_GAME::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_ENTER_GAME.player)
  
  ::Protocol::PlayerInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerInfo* S_ENTER_GAME::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerInfo>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::PlayerInfo* S_ENTER_GAME::mutable_player() {
  ::Protocol::PlayerInfo* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ENTER_GAME.player)
  return _msg;
}
inline void S_ENTER_GAME::set_allocated_player(::Protocol::PlayerInfo* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ENTER_GAME.player)
}

// -------------------------------------------------------------------

// C_LEAVE_GAME

// -------------------------------------------------------------------

// C_SPAWN_PROJECTILE

// .Protocol.ProjectileBasicInfo info = 1;
inline bool C_SPAWN_PROJECTILE::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool C_SPAWN_PROJECTILE::has_info() const {
  return _internal_has_info();
}
inline const ::Protocol::ProjectileBasicInfo& C_SPAWN_PROJECTILE::_internal_info() const {
  const ::Protocol::ProjectileBasicInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ProjectileBasicInfo&>(
      ::Protocol::_ProjectileBasicInfo_default_instance_);
}
inline const ::Protocol::ProjectileBasicInfo& C_SPAWN_PROJECTILE::info() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SPAWN_PROJECTILE.info)
  return _internal_info();
}
inline void C_SPAWN_PROJECTILE::unsafe_arena_set_allocated_info(
    ::Protocol::ProjectileBasicInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SPAWN_PROJECTILE.info)
}
inline ::Protocol::ProjectileBasicInfo* C_SPAWN_PROJECTILE::release_info() {
  
  ::Protocol::ProjectileBasicInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ProjectileBasicInfo* C_SPAWN_PROJECTILE::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:Protocol.C_SPAWN_PROJECTILE.info)
  
  ::Protocol::ProjectileBasicInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::Protocol::ProjectileBasicInfo* C_SPAWN_PROJECTILE::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ProjectileBasicInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::Protocol::ProjectileBasicInfo* C_SPAWN_PROJECTILE::mutable_info() {
  ::Protocol::ProjectileBasicInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SPAWN_PROJECTILE.info)
  return _msg;
}
inline void C_SPAWN_PROJECTILE::set_allocated_info(::Protocol::ProjectileBasicInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SPAWN_PROJECTILE.info)
}

// .Protocol.SkillMesh mesh = 2;
inline void C_SPAWN_PROJECTILE::clear_mesh() {
  _impl_.mesh_ = 0;
}
inline ::Protocol::SkillMesh C_SPAWN_PROJECTILE::_internal_mesh() const {
  return static_cast< ::Protocol::SkillMesh >(_impl_.mesh_);
}
inline ::Protocol::SkillMesh C_SPAWN_PROJECTILE::mesh() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SPAWN_PROJECTILE.mesh)
  return _internal_mesh();
}
inline void C_SPAWN_PROJECTILE::_internal_set_mesh(::Protocol::SkillMesh value) {
  
  _impl_.mesh_ = value;
}
inline void C_SPAWN_PROJECTILE::set_mesh(::Protocol::SkillMesh value) {
  _internal_set_mesh(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SPAWN_PROJECTILE.mesh)
}

// -------------------------------------------------------------------

// S_SPAWN_PROJECTILE_SUCESSE

// uint64 projectile_id = 1;
inline void S_SPAWN_PROJECTILE_SUCESSE::clear_projectile_id() {
  _impl_.projectile_id_ = uint64_t{0u};
}
inline uint64_t S_SPAWN_PROJECTILE_SUCESSE::_internal_projectile_id() const {
  return _impl_.projectile_id_;
}
inline uint64_t S_SPAWN_PROJECTILE_SUCESSE::projectile_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_PROJECTILE_SUCESSE.projectile_id)
  return _internal_projectile_id();
}
inline void S_SPAWN_PROJECTILE_SUCESSE::_internal_set_projectile_id(uint64_t value) {
  
  _impl_.projectile_id_ = value;
}
inline void S_SPAWN_PROJECTILE_SUCESSE::set_projectile_id(uint64_t value) {
  _internal_set_projectile_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SPAWN_PROJECTILE_SUCESSE.projectile_id)
}

// .Protocol.Vector3 size = 2;
inline bool S_SPAWN_PROJECTILE_SUCESSE::_internal_has_size() const {
  return this != internal_default_instance() && _impl_.size_ != nullptr;
}
inline bool S_SPAWN_PROJECTILE_SUCESSE::has_size() const {
  return _internal_has_size();
}
inline const ::Protocol::Vector3& S_SPAWN_PROJECTILE_SUCESSE::_internal_size() const {
  const ::Protocol::Vector3* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_SPAWN_PROJECTILE_SUCESSE::size() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_PROJECTILE_SUCESSE.size)
  return _internal_size();
}
inline void S_SPAWN_PROJECTILE_SUCESSE::unsafe_arena_set_allocated_size(
    ::Protocol::Vector3* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SPAWN_PROJECTILE_SUCESSE.size)
}
inline ::Protocol::Vector3* S_SPAWN_PROJECTILE_SUCESSE::release_size() {
  
  ::Protocol::Vector3* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_SPAWN_PROJECTILE_SUCESSE::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:Protocol.S_SPAWN_PROJECTILE_SUCESSE.size)
  
  ::Protocol::Vector3* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_SPAWN_PROJECTILE_SUCESSE::_internal_mutable_size() {
  
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::Protocol::Vector3* S_SPAWN_PROJECTILE_SUCESSE::mutable_size() {
  ::Protocol::Vector3* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SPAWN_PROJECTILE_SUCESSE.size)
  return _msg;
}
inline void S_SPAWN_PROJECTILE_SUCESSE::set_allocated_size(::Protocol::Vector3* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SPAWN_PROJECTILE_SUCESSE.size)
}

// .Protocol.SkillMesh mesh = 3;
inline void S_SPAWN_PROJECTILE_SUCESSE::clear_mesh() {
  _impl_.mesh_ = 0;
}
inline ::Protocol::SkillMesh S_SPAWN_PROJECTILE_SUCESSE::_internal_mesh() const {
  return static_cast< ::Protocol::SkillMesh >(_impl_.mesh_);
}
inline ::Protocol::SkillMesh S_SPAWN_PROJECTILE_SUCESSE::mesh() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_PROJECTILE_SUCESSE.mesh)
  return _internal_mesh();
}
inline void S_SPAWN_PROJECTILE_SUCESSE::_internal_set_mesh(::Protocol::SkillMesh value) {
  
  _impl_.mesh_ = value;
}
inline void S_SPAWN_PROJECTILE_SUCESSE::set_mesh(::Protocol::SkillMesh value) {
  _internal_set_mesh(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SPAWN_PROJECTILE_SUCESSE.mesh)
}

// -------------------------------------------------------------------

// S_LEAVE_GAME

// -------------------------------------------------------------------

// C_MOVE

// .Protocol.PlayerMoveInfo player_move_info = 1;
inline bool C_MOVE::_internal_has_player_move_info() const {
  return this != internal_default_instance() && _impl_.player_move_info_ != nullptr;
}
inline bool C_MOVE::has_player_move_info() const {
  return _internal_has_player_move_info();
}
inline const ::Protocol::PlayerMoveInfo& C_MOVE::_internal_player_move_info() const {
  const ::Protocol::PlayerMoveInfo* p = _impl_.player_move_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerMoveInfo&>(
      ::Protocol::_PlayerMoveInfo_default_instance_);
}
inline const ::Protocol::PlayerMoveInfo& C_MOVE::player_move_info() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.player_move_info)
  return _internal_player_move_info();
}
inline void C_MOVE::unsafe_arena_set_allocated_player_move_info(
    ::Protocol::PlayerMoveInfo* player_move_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_move_info_);
  }
  _impl_.player_move_info_ = player_move_info;
  if (player_move_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_MOVE.player_move_info)
}
inline ::Protocol::PlayerMoveInfo* C_MOVE::release_player_move_info() {
  
  ::Protocol::PlayerMoveInfo* temp = _impl_.player_move_info_;
  _impl_.player_move_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PlayerMoveInfo* C_MOVE::unsafe_arena_release_player_move_info() {
  // @@protoc_insertion_point(field_release:Protocol.C_MOVE.player_move_info)
  
  ::Protocol::PlayerMoveInfo* temp = _impl_.player_move_info_;
  _impl_.player_move_info_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerMoveInfo* C_MOVE::_internal_mutable_player_move_info() {
  
  if (_impl_.player_move_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerMoveInfo>(GetArenaForAllocation());
    _impl_.player_move_info_ = p;
  }
  return _impl_.player_move_info_;
}
inline ::Protocol::PlayerMoveInfo* C_MOVE::mutable_player_move_info() {
  ::Protocol::PlayerMoveInfo* _msg = _internal_mutable_player_move_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C_MOVE.player_move_info)
  return _msg;
}
inline void C_MOVE::set_allocated_player_move_info(::Protocol::PlayerMoveInfo* player_move_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_move_info_);
  }
  if (player_move_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_move_info));
    if (message_arena != submessage_arena) {
      player_move_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_move_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_move_info_ = player_move_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MOVE.player_move_info)
}

// .Protocol.Vector3 dir = 2;
inline bool C_MOVE::_internal_has_dir() const {
  return this != internal_default_instance() && _impl_.dir_ != nullptr;
}
inline bool C_MOVE::has_dir() const {
  return _internal_has_dir();
}
inline const ::Protocol::Vector3& C_MOVE::_internal_dir() const {
  const ::Protocol::Vector3* p = _impl_.dir_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_MOVE::dir() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.dir)
  return _internal_dir();
}
inline void C_MOVE::unsafe_arena_set_allocated_dir(
    ::Protocol::Vector3* dir) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dir_);
  }
  _impl_.dir_ = dir;
  if (dir) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_MOVE.dir)
}
inline ::Protocol::Vector3* C_MOVE::release_dir() {
  
  ::Protocol::Vector3* temp = _impl_.dir_;
  _impl_.dir_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_MOVE::unsafe_arena_release_dir() {
  // @@protoc_insertion_point(field_release:Protocol.C_MOVE.dir)
  
  ::Protocol::Vector3* temp = _impl_.dir_;
  _impl_.dir_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_MOVE::_internal_mutable_dir() {
  
  if (_impl_.dir_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.dir_ = p;
  }
  return _impl_.dir_;
}
inline ::Protocol::Vector3* C_MOVE::mutable_dir() {
  ::Protocol::Vector3* _msg = _internal_mutable_dir();
  // @@protoc_insertion_point(field_mutable:Protocol.C_MOVE.dir)
  return _msg;
}
inline void C_MOVE::set_allocated_dir(::Protocol::Vector3* dir) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dir_);
  }
  if (dir) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dir));
    if (message_arena != submessage_arena) {
      dir = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dir, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dir_ = dir;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MOVE.dir)
}

// .Protocol.SkillMesh mesh = 3;
inline void C_MOVE::clear_mesh() {
  _impl_.mesh_ = 0;
}
inline ::Protocol::SkillMesh C_MOVE::_internal_mesh() const {
  return static_cast< ::Protocol::SkillMesh >(_impl_.mesh_);
}
inline ::Protocol::SkillMesh C_MOVE::mesh() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.mesh)
  return _internal_mesh();
}
inline void C_MOVE::_internal_set_mesh(::Protocol::SkillMesh value) {
  
  _impl_.mesh_ = value;
}
inline void C_MOVE::set_mesh(::Protocol::SkillMesh value) {
  _internal_set_mesh(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MOVE.mesh)
}

// bool IsMove = 4;
inline void C_MOVE::clear_ismove() {
  _impl_.ismove_ = false;
}
inline bool C_MOVE::_internal_ismove() const {
  return _impl_.ismove_;
}
inline bool C_MOVE::ismove() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.IsMove)
  return _internal_ismove();
}
inline void C_MOVE::_internal_set_ismove(bool value) {
  
  _impl_.ismove_ = value;
}
inline void C_MOVE::set_ismove(bool value) {
  _internal_set_ismove(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MOVE.IsMove)
}

// -------------------------------------------------------------------

// C_MOVE_PROJECTILE

// .Protocol.ProjectileInfo projectile_info = 1;
inline bool C_MOVE_PROJECTILE::_internal_has_projectile_info() const {
  return this != internal_default_instance() && _impl_.projectile_info_ != nullptr;
}
inline bool C_MOVE_PROJECTILE::has_projectile_info() const {
  return _internal_has_projectile_info();
}
inline const ::Protocol::ProjectileInfo& C_MOVE_PROJECTILE::_internal_projectile_info() const {
  const ::Protocol::ProjectileInfo* p = _impl_.projectile_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ProjectileInfo&>(
      ::Protocol::_ProjectileInfo_default_instance_);
}
inline const ::Protocol::ProjectileInfo& C_MOVE_PROJECTILE::projectile_info() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE_PROJECTILE.projectile_info)
  return _internal_projectile_info();
}
inline void C_MOVE_PROJECTILE::unsafe_arena_set_allocated_projectile_info(
    ::Protocol::ProjectileInfo* projectile_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectile_info_);
  }
  _impl_.projectile_info_ = projectile_info;
  if (projectile_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_MOVE_PROJECTILE.projectile_info)
}
inline ::Protocol::ProjectileInfo* C_MOVE_PROJECTILE::release_projectile_info() {
  
  ::Protocol::ProjectileInfo* temp = _impl_.projectile_info_;
  _impl_.projectile_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ProjectileInfo* C_MOVE_PROJECTILE::unsafe_arena_release_projectile_info() {
  // @@protoc_insertion_point(field_release:Protocol.C_MOVE_PROJECTILE.projectile_info)
  
  ::Protocol::ProjectileInfo* temp = _impl_.projectile_info_;
  _impl_.projectile_info_ = nullptr;
  return temp;
}
inline ::Protocol::ProjectileInfo* C_MOVE_PROJECTILE::_internal_mutable_projectile_info() {
  
  if (_impl_.projectile_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ProjectileInfo>(GetArenaForAllocation());
    _impl_.projectile_info_ = p;
  }
  return _impl_.projectile_info_;
}
inline ::Protocol::ProjectileInfo* C_MOVE_PROJECTILE::mutable_projectile_info() {
  ::Protocol::ProjectileInfo* _msg = _internal_mutable_projectile_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C_MOVE_PROJECTILE.projectile_info)
  return _msg;
}
inline void C_MOVE_PROJECTILE::set_allocated_projectile_info(::Protocol::ProjectileInfo* projectile_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectile_info_);
  }
  if (projectile_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projectile_info));
    if (message_arena != submessage_arena) {
      projectile_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectile_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projectile_info_ = projectile_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MOVE_PROJECTILE.projectile_info)
}

// -------------------------------------------------------------------

// S_MOVE

// .Protocol.PlayerMoveInfo player_move_info = 1;
inline bool S_MOVE::_internal_has_player_move_info() const {
  return this != internal_default_instance() && _impl_.player_move_info_ != nullptr;
}
inline bool S_MOVE::has_player_move_info() const {
  return _internal_has_player_move_info();
}
inline const ::Protocol::PlayerMoveInfo& S_MOVE::_internal_player_move_info() const {
  const ::Protocol::PlayerMoveInfo* p = _impl_.player_move_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerMoveInfo&>(
      ::Protocol::_PlayerMoveInfo_default_instance_);
}
inline const ::Protocol::PlayerMoveInfo& S_MOVE::player_move_info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE.player_move_info)
  return _internal_player_move_info();
}
inline void S_MOVE::unsafe_arena_set_allocated_player_move_info(
    ::Protocol::PlayerMoveInfo* player_move_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_move_info_);
  }
  _impl_.player_move_info_ = player_move_info;
  if (player_move_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_MOVE.player_move_info)
}
inline ::Protocol::PlayerMoveInfo* S_MOVE::release_player_move_info() {
  
  ::Protocol::PlayerMoveInfo* temp = _impl_.player_move_info_;
  _impl_.player_move_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PlayerMoveInfo* S_MOVE::unsafe_arena_release_player_move_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_MOVE.player_move_info)
  
  ::Protocol::PlayerMoveInfo* temp = _impl_.player_move_info_;
  _impl_.player_move_info_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerMoveInfo* S_MOVE::_internal_mutable_player_move_info() {
  
  if (_impl_.player_move_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerMoveInfo>(GetArenaForAllocation());
    _impl_.player_move_info_ = p;
  }
  return _impl_.player_move_info_;
}
inline ::Protocol::PlayerMoveInfo* S_MOVE::mutable_player_move_info() {
  ::Protocol::PlayerMoveInfo* _msg = _internal_mutable_player_move_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_MOVE.player_move_info)
  return _msg;
}
inline void S_MOVE::set_allocated_player_move_info(::Protocol::PlayerMoveInfo* player_move_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_move_info_);
  }
  if (player_move_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_move_info));
    if (message_arena != submessage_arena) {
      player_move_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_move_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_move_info_ = player_move_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MOVE.player_move_info)
}

// -------------------------------------------------------------------

// S_UPDATE_PLAYER

// .Protocol.PlayerUpdateInfo player_update_info = 1;
inline bool S_UPDATE_PLAYER::_internal_has_player_update_info() const {
  return this != internal_default_instance() && _impl_.player_update_info_ != nullptr;
}
inline bool S_UPDATE_PLAYER::has_player_update_info() const {
  return _internal_has_player_update_info();
}
inline const ::Protocol::PlayerUpdateInfo& S_UPDATE_PLAYER::_internal_player_update_info() const {
  const ::Protocol::PlayerUpdateInfo* p = _impl_.player_update_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerUpdateInfo&>(
      ::Protocol::_PlayerUpdateInfo_default_instance_);
}
inline const ::Protocol::PlayerUpdateInfo& S_UPDATE_PLAYER::player_update_info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_UPDATE_PLAYER.player_update_info)
  return _internal_player_update_info();
}
inline void S_UPDATE_PLAYER::unsafe_arena_set_allocated_player_update_info(
    ::Protocol::PlayerUpdateInfo* player_update_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_update_info_);
  }
  _impl_.player_update_info_ = player_update_info;
  if (player_update_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_UPDATE_PLAYER.player_update_info)
}
inline ::Protocol::PlayerUpdateInfo* S_UPDATE_PLAYER::release_player_update_info() {
  
  ::Protocol::PlayerUpdateInfo* temp = _impl_.player_update_info_;
  _impl_.player_update_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PlayerUpdateInfo* S_UPDATE_PLAYER::unsafe_arena_release_player_update_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_UPDATE_PLAYER.player_update_info)
  
  ::Protocol::PlayerUpdateInfo* temp = _impl_.player_update_info_;
  _impl_.player_update_info_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerUpdateInfo* S_UPDATE_PLAYER::_internal_mutable_player_update_info() {
  
  if (_impl_.player_update_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerUpdateInfo>(GetArenaForAllocation());
    _impl_.player_update_info_ = p;
  }
  return _impl_.player_update_info_;
}
inline ::Protocol::PlayerUpdateInfo* S_UPDATE_PLAYER::mutable_player_update_info() {
  ::Protocol::PlayerUpdateInfo* _msg = _internal_mutable_player_update_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_UPDATE_PLAYER.player_update_info)
  return _msg;
}
inline void S_UPDATE_PLAYER::set_allocated_player_update_info(::Protocol::PlayerUpdateInfo* player_update_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_update_info_);
  }
  if (player_update_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_update_info));
    if (message_arena != submessage_arena) {
      player_update_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_update_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_update_info_ = player_update_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_UPDATE_PLAYER.player_update_info)
}

// -------------------------------------------------------------------

// S_MONSTER_INFO

// repeated .Protocol.MonsterInfo monster_info = 1;
inline int S_MONSTER_INFO::_internal_monster_info_size() const {
  return _impl_.monster_info_.size();
}
inline int S_MONSTER_INFO::monster_info_size() const {
  return _internal_monster_info_size();
}
inline ::Protocol::MonsterInfo* S_MONSTER_INFO::mutable_monster_info(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_MONSTER_INFO.monster_info)
  return _impl_.monster_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::MonsterInfo >*
S_MONSTER_INFO::mutable_monster_info() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_MONSTER_INFO.monster_info)
  return &_impl_.monster_info_;
}
inline const ::Protocol::MonsterInfo& S_MONSTER_INFO::_internal_monster_info(int index) const {
  return _impl_.monster_info_.Get(index);
}
inline const ::Protocol::MonsterInfo& S_MONSTER_INFO::monster_info(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONSTER_INFO.monster_info)
  return _internal_monster_info(index);
}
inline ::Protocol::MonsterInfo* S_MONSTER_INFO::_internal_add_monster_info() {
  return _impl_.monster_info_.Add();
}
inline ::Protocol::MonsterInfo* S_MONSTER_INFO::add_monster_info() {
  ::Protocol::MonsterInfo* _add = _internal_add_monster_info();
  // @@protoc_insertion_point(field_add:Protocol.S_MONSTER_INFO.monster_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::MonsterInfo >&
S_MONSTER_INFO::monster_info() const {
  // @@protoc_insertion_point(field_list:Protocol.S_MONSTER_INFO.monster_info)
  return _impl_.monster_info_;
}

// -------------------------------------------------------------------

// S_PROJECTILE_INFO

// .Protocol.ProjectileInfo projectile_info = 1;
inline bool S_PROJECTILE_INFO::_internal_has_projectile_info() const {
  return this != internal_default_instance() && _impl_.projectile_info_ != nullptr;
}
inline bool S_PROJECTILE_INFO::has_projectile_info() const {
  return _internal_has_projectile_info();
}
inline const ::Protocol::ProjectileInfo& S_PROJECTILE_INFO::_internal_projectile_info() const {
  const ::Protocol::ProjectileInfo* p = _impl_.projectile_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ProjectileInfo&>(
      ::Protocol::_ProjectileInfo_default_instance_);
}
inline const ::Protocol::ProjectileInfo& S_PROJECTILE_INFO::projectile_info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PROJECTILE_INFO.projectile_info)
  return _internal_projectile_info();
}
inline void S_PROJECTILE_INFO::unsafe_arena_set_allocated_projectile_info(
    ::Protocol::ProjectileInfo* projectile_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectile_info_);
  }
  _impl_.projectile_info_ = projectile_info;
  if (projectile_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_PROJECTILE_INFO.projectile_info)
}
inline ::Protocol::ProjectileInfo* S_PROJECTILE_INFO::release_projectile_info() {
  
  ::Protocol::ProjectileInfo* temp = _impl_.projectile_info_;
  _impl_.projectile_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ProjectileInfo* S_PROJECTILE_INFO::unsafe_arena_release_projectile_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_PROJECTILE_INFO.projectile_info)
  
  ::Protocol::ProjectileInfo* temp = _impl_.projectile_info_;
  _impl_.projectile_info_ = nullptr;
  return temp;
}
inline ::Protocol::ProjectileInfo* S_PROJECTILE_INFO::_internal_mutable_projectile_info() {
  
  if (_impl_.projectile_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ProjectileInfo>(GetArenaForAllocation());
    _impl_.projectile_info_ = p;
  }
  return _impl_.projectile_info_;
}
inline ::Protocol::ProjectileInfo* S_PROJECTILE_INFO::mutable_projectile_info() {
  ::Protocol::ProjectileInfo* _msg = _internal_mutable_projectile_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PROJECTILE_INFO.projectile_info)
  return _msg;
}
inline void S_PROJECTILE_INFO::set_allocated_projectile_info(::Protocol::ProjectileInfo* projectile_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectile_info_);
  }
  if (projectile_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projectile_info));
    if (message_arena != submessage_arena) {
      projectile_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectile_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projectile_info_ = projectile_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PROJECTILE_INFO.projectile_info)
}

// -------------------------------------------------------------------

// S_SPAWN

// repeated .Protocol.ObjectInfo objects = 1;
inline int S_SPAWN::_internal_objects_size() const {
  return _impl_.objects_.size();
}
inline int S_SPAWN::objects_size() const {
  return _internal_objects_size();
}
inline ::Protocol::ObjectInfo* S_SPAWN::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SPAWN.objects)
  return _impl_.objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
S_SPAWN::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_SPAWN.objects)
  return &_impl_.objects_;
}
inline const ::Protocol::ObjectInfo& S_SPAWN::_internal_objects(int index) const {
  return _impl_.objects_.Get(index);
}
inline const ::Protocol::ObjectInfo& S_SPAWN::objects(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN.objects)
  return _internal_objects(index);
}
inline ::Protocol::ObjectInfo* S_SPAWN::_internal_add_objects() {
  return _impl_.objects_.Add();
}
inline ::Protocol::ObjectInfo* S_SPAWN::add_objects() {
  ::Protocol::ObjectInfo* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:Protocol.S_SPAWN.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
S_SPAWN::objects() const {
  // @@protoc_insertion_point(field_list:Protocol.S_SPAWN.objects)
  return _impl_.objects_;
}

// -------------------------------------------------------------------

// S_SPAWN_NEW_PLAYER

// .Protocol.PlayerInfo player = 1;
inline bool S_SPAWN_NEW_PLAYER::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool S_SPAWN_NEW_PLAYER::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::PlayerInfo& S_SPAWN_NEW_PLAYER::_internal_player() const {
  const ::Protocol::PlayerInfo* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PlayerInfo&>(
      ::Protocol::_PlayerInfo_default_instance_);
}
inline const ::Protocol::PlayerInfo& S_SPAWN_NEW_PLAYER::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_NEW_PLAYER.player)
  return _internal_player();
}
inline void S_SPAWN_NEW_PLAYER::unsafe_arena_set_allocated_player(
    ::Protocol::PlayerInfo* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SPAWN_NEW_PLAYER.player)
}
inline ::Protocol::PlayerInfo* S_SPAWN_NEW_PLAYER::release_player() {
  
  ::Protocol::PlayerInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PlayerInfo* S_SPAWN_NEW_PLAYER::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_SPAWN_NEW_PLAYER.player)
  
  ::Protocol::PlayerInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::PlayerInfo* S_SPAWN_NEW_PLAYER::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PlayerInfo>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::PlayerInfo* S_SPAWN_NEW_PLAYER::mutable_player() {
  ::Protocol::PlayerInfo* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SPAWN_NEW_PLAYER.player)
  return _msg;
}
inline void S_SPAWN_NEW_PLAYER::set_allocated_player(::Protocol::PlayerInfo* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SPAWN_NEW_PLAYER.player)
}

// -------------------------------------------------------------------

// S_SPAWN_EXISTING_PLAYER

// repeated .Protocol.PlayerInfo player = 1;
inline int S_SPAWN_EXISTING_PLAYER::_internal_player_size() const {
  return _impl_.player_.size();
}
inline int S_SPAWN_EXISTING_PLAYER::player_size() const {
  return _internal_player_size();
}
inline ::Protocol::PlayerInfo* S_SPAWN_EXISTING_PLAYER::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SPAWN_EXISTING_PLAYER.player)
  return _impl_.player_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >*
S_SPAWN_EXISTING_PLAYER::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_SPAWN_EXISTING_PLAYER.player)
  return &_impl_.player_;
}
inline const ::Protocol::PlayerInfo& S_SPAWN_EXISTING_PLAYER::_internal_player(int index) const {
  return _impl_.player_.Get(index);
}
inline const ::Protocol::PlayerInfo& S_SPAWN_EXISTING_PLAYER::player(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_EXISTING_PLAYER.player)
  return _internal_player(index);
}
inline ::Protocol::PlayerInfo* S_SPAWN_EXISTING_PLAYER::_internal_add_player() {
  return _impl_.player_.Add();
}
inline ::Protocol::PlayerInfo* S_SPAWN_EXISTING_PLAYER::add_player() {
  ::Protocol::PlayerInfo* _add = _internal_add_player();
  // @@protoc_insertion_point(field_add:Protocol.S_SPAWN_EXISTING_PLAYER.player)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >&
S_SPAWN_EXISTING_PLAYER::player() const {
  // @@protoc_insertion_point(field_list:Protocol.S_SPAWN_EXISTING_PLAYER.player)
  return _impl_.player_;
}

// -------------------------------------------------------------------

// S_DESPAWN_PLAYER

// uint64 player_ids = 1;
inline void S_DESPAWN_PLAYER::clear_player_ids() {
  _impl_.player_ids_ = uint64_t{0u};
}
inline uint64_t S_DESPAWN_PLAYER::_internal_player_ids() const {
  return _impl_.player_ids_;
}
inline uint64_t S_DESPAWN_PLAYER::player_ids() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DESPAWN_PLAYER.player_ids)
  return _internal_player_ids();
}
inline void S_DESPAWN_PLAYER::_internal_set_player_ids(uint64_t value) {
  
  _impl_.player_ids_ = value;
}
inline void S_DESPAWN_PLAYER::set_player_ids(uint64_t value) {
  _internal_set_player_ids(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DESPAWN_PLAYER.player_ids)
}

// -------------------------------------------------------------------

// S_DESPAWN

// repeated uint64 object_ids = 1;
inline int S_DESPAWN::_internal_object_ids_size() const {
  return _impl_.object_ids_.size();
}
inline int S_DESPAWN::object_ids_size() const {
  return _internal_object_ids_size();
}
inline void S_DESPAWN::clear_object_ids() {
  _impl_.object_ids_.Clear();
}
inline uint64_t S_DESPAWN::_internal_object_ids(int index) const {
  return _impl_.object_ids_.Get(index);
}
inline uint64_t S_DESPAWN::object_ids(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_DESPAWN.object_ids)
  return _internal_object_ids(index);
}
inline void S_DESPAWN::set_object_ids(int index, uint64_t value) {
  _impl_.object_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_DESPAWN.object_ids)
}
inline void S_DESPAWN::_internal_add_object_ids(uint64_t value) {
  _impl_.object_ids_.Add(value);
}
inline void S_DESPAWN::add_object_ids(uint64_t value) {
  _internal_add_object_ids(value);
  // @@protoc_insertion_point(field_add:Protocol.S_DESPAWN.object_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
S_DESPAWN::_internal_object_ids() const {
  return _impl_.object_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
S_DESPAWN::object_ids() const {
  // @@protoc_insertion_point(field_list:Protocol.S_DESPAWN.object_ids)
  return _internal_object_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
S_DESPAWN::_internal_mutable_object_ids() {
  return &_impl_.object_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
S_DESPAWN::mutable_object_ids() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_DESPAWN.object_ids)
  return _internal_mutable_object_ids();
}

// -------------------------------------------------------------------

// S_GATE_OPNE

// repeated .Protocol.ObjectInfo open_objects = 1;
inline int S_GATE_OPNE::_internal_open_objects_size() const {
  return _impl_.open_objects_.size();
}
inline int S_GATE_OPNE::open_objects_size() const {
  return _internal_open_objects_size();
}
inline ::Protocol::ObjectInfo* S_GATE_OPNE::mutable_open_objects(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_GATE_OPNE.open_objects)
  return _impl_.open_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
S_GATE_OPNE::mutable_open_objects() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_GATE_OPNE.open_objects)
  return &_impl_.open_objects_;
}
inline const ::Protocol::ObjectInfo& S_GATE_OPNE::_internal_open_objects(int index) const {
  return _impl_.open_objects_.Get(index);
}
inline const ::Protocol::ObjectInfo& S_GATE_OPNE::open_objects(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_GATE_OPNE.open_objects)
  return _internal_open_objects(index);
}
inline ::Protocol::ObjectInfo* S_GATE_OPNE::_internal_add_open_objects() {
  return _impl_.open_objects_.Add();
}
inline ::Protocol::ObjectInfo* S_GATE_OPNE::add_open_objects() {
  ::Protocol::ObjectInfo* _add = _internal_add_open_objects();
  // @@protoc_insertion_point(field_add:Protocol.S_GATE_OPNE.open_objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
S_GATE_OPNE::open_objects() const {
  // @@protoc_insertion_point(field_list:Protocol.S_GATE_OPNE.open_objects)
  return _impl_.open_objects_;
}

// -------------------------------------------------------------------

// S_GATE_CLOSE

// repeated .Protocol.ObjectInfo cloase_objects = 1;
inline int S_GATE_CLOSE::_internal_cloase_objects_size() const {
  return _impl_.cloase_objects_.size();
}
inline int S_GATE_CLOSE::cloase_objects_size() const {
  return _internal_cloase_objects_size();
}
inline ::Protocol::ObjectInfo* S_GATE_CLOSE::mutable_cloase_objects(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_GATE_CLOSE.cloase_objects)
  return _impl_.cloase_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
S_GATE_CLOSE::mutable_cloase_objects() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_GATE_CLOSE.cloase_objects)
  return &_impl_.cloase_objects_;
}
inline const ::Protocol::ObjectInfo& S_GATE_CLOSE::_internal_cloase_objects(int index) const {
  return _impl_.cloase_objects_.Get(index);
}
inline const ::Protocol::ObjectInfo& S_GATE_CLOSE::cloase_objects(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_GATE_CLOSE.cloase_objects)
  return _internal_cloase_objects(index);
}
inline ::Protocol::ObjectInfo* S_GATE_CLOSE::_internal_add_cloase_objects() {
  return _impl_.cloase_objects_.Add();
}
inline ::Protocol::ObjectInfo* S_GATE_CLOSE::add_cloase_objects() {
  ::Protocol::ObjectInfo* _add = _internal_add_cloase_objects();
  // @@protoc_insertion_point(field_add:Protocol.S_GATE_CLOSE.cloase_objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
S_GATE_CLOSE::cloase_objects() const {
  // @@protoc_insertion_point(field_list:Protocol.S_GATE_CLOSE.cloase_objects)
  return _impl_.cloase_objects_;
}

// -------------------------------------------------------------------

// S_SPAWN_NPC

// repeated .Protocol.NpcInfo npc_info = 1;
inline int S_SPAWN_NPC::_internal_npc_info_size() const {
  return _impl_.npc_info_.size();
}
inline int S_SPAWN_NPC::npc_info_size() const {
  return _internal_npc_info_size();
}
inline ::Protocol::NpcInfo* S_SPAWN_NPC::mutable_npc_info(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SPAWN_NPC.npc_info)
  return _impl_.npc_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::NpcInfo >*
S_SPAWN_NPC::mutable_npc_info() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_SPAWN_NPC.npc_info)
  return &_impl_.npc_info_;
}
inline const ::Protocol::NpcInfo& S_SPAWN_NPC::_internal_npc_info(int index) const {
  return _impl_.npc_info_.Get(index);
}
inline const ::Protocol::NpcInfo& S_SPAWN_NPC::npc_info(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_NPC.npc_info)
  return _internal_npc_info(index);
}
inline ::Protocol::NpcInfo* S_SPAWN_NPC::_internal_add_npc_info() {
  return _impl_.npc_info_.Add();
}
inline ::Protocol::NpcInfo* S_SPAWN_NPC::add_npc_info() {
  ::Protocol::NpcInfo* _add = _internal_add_npc_info();
  // @@protoc_insertion_point(field_add:Protocol.S_SPAWN_NPC.npc_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::NpcInfo >&
S_SPAWN_NPC::npc_info() const {
  // @@protoc_insertion_point(field_list:Protocol.S_SPAWN_NPC.npc_info)
  return _impl_.npc_info_;
}

// -------------------------------------------------------------------

// C_BUY_ITEM

// uint32 item_id = 1;
inline void C_BUY_ITEM::clear_item_id() {
  _impl_.item_id_ = 0u;
}
inline uint32_t C_BUY_ITEM::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint32_t C_BUY_ITEM::item_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BUY_ITEM.item_id)
  return _internal_item_id();
}
inline void C_BUY_ITEM::_internal_set_item_id(uint32_t value) {
  
  _impl_.item_id_ = value;
}
inline void C_BUY_ITEM::set_item_id(uint32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C_BUY_ITEM.item_id)
}

// -------------------------------------------------------------------

// S_UPDATE_ITEM

// uint32 npc_id = 1;
inline void S_UPDATE_ITEM::clear_npc_id() {
  _impl_.npc_id_ = 0u;
}
inline uint32_t S_UPDATE_ITEM::_internal_npc_id() const {
  return _impl_.npc_id_;
}
inline uint32_t S_UPDATE_ITEM::npc_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_UPDATE_ITEM.npc_id)
  return _internal_npc_id();
}
inline void S_UPDATE_ITEM::_internal_set_npc_id(uint32_t value) {
  
  _impl_.npc_id_ = value;
}
inline void S_UPDATE_ITEM::set_npc_id(uint32_t value) {
  _internal_set_npc_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_UPDATE_ITEM.npc_id)
}

// repeated .Protocol.ItemInfo item_info = 2;
inline int S_UPDATE_ITEM::_internal_item_info_size() const {
  return _impl_.item_info_.size();
}
inline int S_UPDATE_ITEM::item_info_size() const {
  return _internal_item_info_size();
}
inline ::Protocol::ItemInfo* S_UPDATE_ITEM::mutable_item_info(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_UPDATE_ITEM.item_info)
  return _impl_.item_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >*
S_UPDATE_ITEM::mutable_item_info() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_UPDATE_ITEM.item_info)
  return &_impl_.item_info_;
}
inline const ::Protocol::ItemInfo& S_UPDATE_ITEM::_internal_item_info(int index) const {
  return _impl_.item_info_.Get(index);
}
inline const ::Protocol::ItemInfo& S_UPDATE_ITEM::item_info(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_UPDATE_ITEM.item_info)
  return _internal_item_info(index);
}
inline ::Protocol::ItemInfo* S_UPDATE_ITEM::_internal_add_item_info() {
  return _impl_.item_info_.Add();
}
inline ::Protocol::ItemInfo* S_UPDATE_ITEM::add_item_info() {
  ::Protocol::ItemInfo* _add = _internal_add_item_info();
  // @@protoc_insertion_point(field_add:Protocol.S_UPDATE_ITEM.item_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >&
S_UPDATE_ITEM::item_info() const {
  // @@protoc_insertion_point(field_list:Protocol.S_UPDATE_ITEM.item_info)
  return _impl_.item_info_;
}

// -------------------------------------------------------------------

// S_BUY_ITEM

// bool is_success = 1;
inline void S_BUY_ITEM::clear_is_success() {
  _impl_.is_success_ = false;
}
inline bool S_BUY_ITEM::_internal_is_success() const {
  return _impl_.is_success_;
}
inline bool S_BUY_ITEM::is_success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BUY_ITEM.is_success)
  return _internal_is_success();
}
inline void S_BUY_ITEM::_internal_set_is_success(bool value) {
  
  _impl_.is_success_ = value;
}
inline void S_BUY_ITEM::set_is_success(bool value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_BUY_ITEM.is_success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
